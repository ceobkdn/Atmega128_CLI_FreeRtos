;/*
;Project : 트레이닝보드와 PC간의 RS232포트를 사용하여 통신 패킷 송수신 테스트
;Version : LK-AVR128T V01
;Date    : 2011-07-28
;Author  : Kyung Nam Lee
;Company : LKEMBEDDED
;Compiler: CodevisionAVR+AVRStudio
;Comment: PC에서 송신 한 8Byte의 데이터 패킷을 트레이닝보드에서 수신 후, PC쪽으로 재 전송하는 프로그램이다.
;         이때의  실험 시 UTS(USB TO RS232)컨버터를 사용하여 PC와 트레이닝보드를 연결 하였다.
;*/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h> // Standard Input/Output functions
;#include <string.h>
;#include <delay.h>
;#include <sw.h>
;
;
;#define LED_CON               *((unsigned char *)0x8000) // LED Control bus
;#define SET_CON                  *((unsigned char *)0x8100) // FND, Buzzer, RELAY Control bus
;#define LCD_CON               *((unsigned char *)0x8200) // TLCD, GLCD Control bus
;#define LCD_DATABUS           *((unsigned char *)0x8300) // TLCD, GLCD, FND, Dotmatrix Data bus
;#define DOT_YELLOW              *((unsigned char *)0x8400) // Dotmatrix Yellow LED
;#define DOT_RED                  *((unsigned char *)0x8500) // Dotmatrix Yellow RED
;#define STEPMOR                  *((unsigned char *)0x8600) // Stepping Motor Control bus
;#define DCSERVO				  *((unsigned char *)0x8700) // DC, Servo Motor Control bus
;
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define DOR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define RX_BUFFER_SIZE0 8 // USART0 Receiver buffer
;
;char rx_buffer0[RX_BUFFER_SIZE0];
;unsigned int rx_wr_index0,rx_counter0;
;bit rx_buffer_overflow0; // This flag is set on USART0 Receiver buffer overflow
;
;//void fPrint(char *string);
;//void cli_put(char c);
;void USART_Transmit( unsigned int data );
;
;interrupt [USART0_RXC] void usart0_rx_isr(void)// USART0 Receiver interrupt service routine
; 0000 0034 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0035 char status,data;
; 0000 0036 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0037 data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0038 USART_Transmit(data);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0039 
; 0000 003A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003B    {
; 0000 003C    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003D    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003E    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003F       {
; 0000 0040       rx_counter0=0;
;PCODE: $0000002B VOL: 0
; 0000 0041       rx_buffer_overflow0=1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0042       }
; 0000 0043    }
;PCODE: $0000002F VOL: 0
; 0000 0044 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void main(void)
; 0000 0047 {
;PCODE: $00000035 VOL: 0
; 0000 0048     // USART0 initialization
; 0000 0049     UCSR0A=0x00; // Communication Parameters: 8 Data, 1 Stop, No Parity
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004A     UCSR0B=0x98; // USART0 Receiver: On
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004B     UCSR0C=0x06; // USART0 Transmitter: On
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004C     UBRR0H=0x00; // USART0 Mode: Asynchronous
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004D     UBRR0L=0x67;  // USART0 Baud Rate: 9600
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004E 
; 0000 004F 
; 0000 0050     //---External I/O initialization
; 0000 0051 	LED_CON=0X00;       // LED GLCD Control bus
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0052 	SET_CON=0X00;       // FND, Buzzer, RELAY Control bus
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0053 	LCD_CON=0X00;       // TLCD, GLCD Control bus
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0054 	LCD_DATABUS=0X00;   // TLCD, GLCD, FND, Dotmatrix Data bus
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0055 	DOT_YELLOW=0X00;    // Dotmatrix Yellow LED
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0056 	DOT_RED=0X00;       // Dotmatrix Yellow RED
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0057 	STEPMOR=0X00;       // Stepping Motor Control bus
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0058 	DCSERVO=0X00;       // DC, Servo Motor Control bus
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0059     //----------------------------------------
; 0000 005A     #asm("sei") // Global enable interrupts
;PCODE: $00000050 VOL: 0
	sei
;PCODE: $00000051 VOL: 0
; 0000 005B while (1) // Endless Loop
;PCODE: $00000052 VOL: 0
; 0000 005C       {
; 0000 005D        int i=0;
; 0000 005E        if(rx_buffer_overflow0)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;	i -> Y+0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005F        {
; 0000 0060             for(i=0;i<8;i++)
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0061             {
; 0000 0062                 USART_Transmit(rx_buffer0[i]);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0063             }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0064 
; 0000 0065             rx_buffer_overflow0=0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0066             USART_Transmit( '\n' );
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0067         }
; 0000 0068 
; 0000 0069 
; 0000 006A 
; 0000 006B 
; 0000 006C       }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 006D }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;
;
;
;
;void USART_Transmit( unsigned int data )
; 0000 0073 {
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0074 /* Wait for empty transmit buffer */
; 0000 0075 while ( !( UCSR0A & (1<<UDRE)) );
;PCODE: $0000007F VOL: 0
;	data -> Y+0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0076 /* Copy 9th bit to TXB8 */
; 0000 0077 UCSR0B &= ~(1<<TXB8);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0078 if ( data & 0x0100 )
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0079 UCSR0B |= (1<<TXB8);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 007A /* Put data into buffer, sends the data */
; 0000 007B UDR0 = data;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 007C }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0

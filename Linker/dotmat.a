;/*****************************************************************************
; *   @file
; *   @brief  Source file of
; *   @author Kyle
; *   @version 1.0.0
; *   @note :    1.
; *              2.
; *              3.
;********************************************************************************/
;
;
;/******************************************************************************/
;/***************************** Include Files **********************************/
;/******************************************************************************/
;#include "dotmat.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;/******************************************************************************/
;/************************* Global variable declaration ************************/
;/******************************************************************************/
;//------------DOT MATRIX-----------------------------
;const unsigned char vertical[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};

	.DSEG
;const unsigned char english[28][8]={
;0xe7,0xdb,0xbd,0xbd,0x81,0xbd,0xbd,0xbd,     // A
;0xc1,0xbd,0xbd,0xc1,0xdd,0xbd,0xbd,0xc1,     // B
;0xc3,0xbd,0xfd,0xfd,0xfd,0xbd,0xbd,0xc3,     // C
;0xc1,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xc1,     // D
;0x81,0xfd,0xfd,0x81,0xfd,0xfd,0xfd,0x81,     // E
;0x81,0xfd,0xfd,0x81,0xfd,0xfd,0xfd,0xfd,     // F
;0xe7,0xd9,0xbd,0xfd,0x8d,0xbd,0xdb,0xe7,     // G
;0xbd,0xbd,0xbd,0x81,0xbd,0xbd,0xbd,0xbd,     // H
;0xc3,0xe7,0xe7,0xe7,0xe7,0xe7,0xe7,0xc3,     // I
;0xc3,0xe7,0xe7,0xe7,0xe7,0xe5,0xf5,0xfb,     // J
;0xdd,0xed,0xf5,0xf9,0xf5,0xed,0xdd,0xbd,     // K
;0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0x81,     // L
;0xbd,0x99,0xa5,0xa5,0xa5,0xbd,0xbd,0xbd,     // M
;0xbd,0xbd,0xb9,0xb5,0xad,0x9d,0xbd,0xbd,     // N
;0xe7,0xdb,0xbd,0xbd,0xbd,0xbd,0xdb,0xe7,     // O
;0xe1,0xdd,0xdd,0xdd,0xe1,0xfd,0xfd,0xfd,     // P
;0xe3,0xdd,0xdd,0xdd,0xd5,0xcd,0xc3,0xbf,     // Q
;0xc1,0xbd,0xbd,0xc1,0xdd,0xbd,0xbd,0xbd,     // R
;0xc3,0xbd,0xfd,0xc3,0xbf,0xbf,0xbd,0xc3,     // S
;0x81,0xe7,0xe7,0xe7,0xe7,0xe7,0xe7,0xe7,     // T
;0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xc3,     // U
;0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xdb,0xe7,     // V
;0xbd,0xbd,0xbd,0xbd,0xa5,0xa5,0xa5,0x99,     // W
;0xbd,0xbd,0xd9,0xe7,0xe7,0xdb,0xbd,0xbd,     // X
;0xbd,0xbd,0xbd,0xdb,0xe7,0xe7,0xe7,0xe7,     // Y
;0x81,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0x81,     // Z
;};
;
;static volatile char DispChar;
;volatile char DispChar = 0;
;
;/******************************************************************************/
;/************************** Functions Implementation **************************/
;/******************************************************************************/
;void DotMatDisp(int c)
; 0003 003A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 003B 	int i=0;
; 0003 003C     int num_value = 0;
; 0003 003D 
; 0003 003E     DispChar = c;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	c -> Y+4
;	i -> R16,R17
;	num_value -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 1
; 0003 003F     num_value = c;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0040 
; 0003 0041     MCUCR=0X80; //enable External memory and I/O control
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0003 0042 //	SET_CON=0X00;       // FND, Bu zzer, RELAY Control bus
; 0003 0043 //	LCD_CON=0X00;       // TLCD, GLCD Control bus
; 0003 0044 	LCD_DATABUS=0X00;   // TLCD, GLCD, FND, Dotmatrix Data bus
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0003 0045 //	DOT_YELLOW=0X00;    // Dotmatrix Yellow LED
; 0003 0046 //	DOT_RED=0X00;       // Dotmatrix Yellow RED
; 0003 0047 //	STEPMOR=0X00;       // Stepping Motor Control bus
; 0003 0048 //	DCSERVO=0X00;       // DC, Servo Motor Control bus
; 0003 0049 
; 0003 004A     for(i=0;i<8;i++)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0003 004B     {
; 0003 004C         DOT_YELLOW=~english[num_value][i]; //Orange LED ?? ??(Horizontal)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0003 004D         DOT_RED=~0XFF;                   //Red LED ?? ??(Horizontal)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0003 004E         LCD_DATABUS=vertical[i];         // ?? ??(Vertical)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0003 004F         delay_ms(1);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0003 0050     }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0003 0051 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;void DotMatRefresh(void)
; 0003 0054 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0055     int i=0;
; 0003 0056     int num_value = 0;
; 0003 0057     num_value = DispChar;
;PCODE: $00000041 VOL: 0
;	i -> R16,R17
;	num_value -> R18,R19
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 1
;PCODE: $00000048 VOL: 0
; 0003 0058 
; 0003 0059     MCUCR=0X80; //enable External memory and I/O control
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0003 005A //	SET_CON=0X00;       // FND, Bu zzer, RELAY Control bus
; 0003 005B //	LCD_CON=0X00;       // TLCD, GLCD Control bus
; 0003 005C 	LCD_DATABUS=0X00;   // TLCD, GLCD, FND, Dotmatrix Data bus
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0003 005D //	DOT_YELLOW=0X00;    // Dotmatrix Yellow LED
; 0003 005E //	DOT_RED=0X00;       // Dotmatrix Yellow RED
; 0003 005F //	STEPMOR=0X00;       // Stepping Motor Control bus
; 0003 0060 //	DCSERVO=0X00;       // DC, Servo Motor Control bus
; 0003 0061 
; 0003 0062     for(i=0;i<8;i++)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0003 0063     {
; 0003 0064         DOT_YELLOW=~english[num_value][i]; //Orange LED ?? ??(Horizontal)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0003 0065         DOT_RED=~0XFF;                   //Red LED ?? ??(Horizontal)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0003 0066         LCD_DATABUS=vertical[i];         // ?? ??(Vertical)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0003 0067         delay_ms(1);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0003 0068 
; 0003 0069     }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0003 006A 
; 0003 006B }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0

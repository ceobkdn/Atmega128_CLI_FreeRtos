;/*****************************************************************************
; *   @file
; *   @brief  Source file of
; *   @author Kyle
; *   @version 1.0.0
; *   @note :    1.
; *              2.
; *              3.
;********************************************************************************/
;
;
;/******************************************************************************/
;/***************************** Include Files **********************************/
;/******************************************************************************/
;#include "uart.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;/******************************************************************************/
;/************************* Global variable declaration ************************/
;/******************************************************************************/
;extern char rx_buffer0[RX_BUFFER_SIZE0];
;extern unsigned int rx_wr_index0,rx_counter0;
;extern bit rx_buffer_overflow0, cmd_enter; // This flag is set on USART0 Receiver buffer overflow
;extern cli_t cli;
;
;char rx_buffer0[RX_BUFFER_SIZE0];
;unsigned int rx_wr_index0,rx_counter0;
;bit rx_buffer_overflow0, cmd_enter;
;
;
;/******************************************************************************/
;/************************** Functions Implementation **************************/
;/******************************************************************************/
;void UartSend( unsigned int data )
; 0002 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0023 /* Wait for empty transmit buffer */
; 0002 0024 while ( !( UCSR0A & (1<<UDRE)) );
;PCODE: $0000000F VOL: 0
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0002 0025 /* Copy 9th bit to TXB8 */
; 0002 0026 UCSR0B &= ~(1<<TXB8);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 0027 if ( data & 0x0100 )
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 0028 UCSR0B |= (1<<TXB8);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 0029 /* Put data into buffer, sends the data */
; 0002 002A UDR0 = data;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 002B }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;
;
;
;interrupt [USART0_RXC] void usart0_rx_isr(void)// USART0 Receiver interrupt service routine
; 0002 0030 {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0002 0031 char status,data;
; 0002 0032 status=UCSR0A;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0002 0033 data=UDR0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 0034 UartSend(data);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0002 0035 //cli_put(&cli, data);
; 0002 0036 
; 0002 0037 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0002 0038    {
; 0002 0039         cli_put(&cli, data);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0002 003A    }
; 0002 003B 
; 0002 003C }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;void Uart0Init()
; 0002 003F {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 0040     // USART0 initialization
; 0002 0041     UCSR0A=0x00; // Communication Parameters: 8 Data, 1 Stop, No Parity
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0002 0042     UCSR0B=0x98; // USART0 Receiver: On
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0002 0043     UCSR0C=0x06; // USART0 Transmitter: On
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 0044     UBRR0H=0x00; // USART0 Mode: Asynchronous
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0002 0045     UBRR0L=0x67;  // USART0 Baud Rate: 9600
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0002 0046 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;void UartTest()
; 0002 0049 {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 004A    int i=0;
; 0002 004B    if(rx_buffer_overflow0)
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;	i -> R16,R17
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0002 004C    {
; 0002 004D         for(i=0;i<8;i++)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 004E         {
; 0002 004F             UartSend(rx_buffer0[i]);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0002 0050         }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0002 0051 
; 0002 0052         rx_buffer_overflow0=0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0053         UartSend( '\n' );
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 0054     }
; 0002 0055 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;
;


AVRASM ver. 2.1.30  D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm Sun Jun 27 12:36:22 2021

D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1074): warning: Register r5 already defined by the .DEF directive
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1075): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.4 Evaluation
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _con=R5
                 	.DEF _FndCnt=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 032a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0698 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 058d 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _str:
000046 3d3d
000047 4c3d
000048 454b
000049 424d      	.DB  0x3D,0x3D,0x3D,0x4C,0x4B,0x45,0x4D,0x42
00004a 4445
00004b 4544
00004c 3d44
00004d 3d3d      	.DB  0x45,0x44,0x44,0x45,0x44,0x3D,0x3D,0x3D
00004e 3d00
00004f 3d3d
000050 203d
000051 5720      	.DB  0x0,0x3D,0x3D,0x3D,0x3D,0x20,0x20,0x57
000052 5757
000053 202e
000054 3d3d
000055 3d3d      	.DB  0x57,0x57,0x2E,0x20,0x3D,0x3D,0x3D,0x3D
000056 003d
000057 3d3d
000058 4c20
000059 454b      	.DB  0x3D,0x0,0x3D,0x3D,0x20,0x4C,0x4B,0x45
00005a 424d
00005b 4445
00005c 4544
00005d 2e44      	.DB  0x4D,0x42,0x45,0x44,0x44,0x45,0x44,0x2E
00005e 3d3d
00005f 3d00
000060 3d3d
000061 203d      	.DB  0x3D,0x3D,0x0,0x3D,0x3D,0x3D,0x3D,0x20
000062 4f43
000063 4b2e
000064 2052
000065 3d3d      	.DB  0x43,0x4F,0x2E,0x4B,0x52,0x20,0x3D,0x3D
000066 3d3d
000067 003d
000068 2020
000069 4520      	.DB  0x3D,0x3D,0x3D,0x0,0x20,0x20,0x20,0x45
00006a 7564
00006b 6163
00006c 6974
00006d 6e6f      	.DB  0x64,0x75,0x63,0x61,0x74,0x69,0x6F,0x6E
00006e 2020
00006f 2020
000070 2000
000071 2020      	.DB  0x20,0x20,0x20,0x20,0x0,0x20,0x20,0x20
000072 6544
000073 6576
000074 6f6c
000075 6d70      	.DB  0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x6D
000076 6e65
000077 2074
000078 0020
000079 2020      	.DB  0x65,0x6E,0x74,0x20,0x20,0x0,0x20,0x20
00007a 5641
00007b 2052
00007c 6544
00007d 2076      	.DB  0x41,0x56,0x52,0x20,0x44,0x65,0x76,0x20
00007e 2026
00007f 4445
000080 2055
000081 2000      	.DB  0x26,0x20,0x45,0x44,0x55,0x20,0x0,0x20
000082 5020
000083 4349
000084 4420
000085 7665      	.DB  0x20,0x50,0x49,0x43,0x20,0x44,0x65,0x76
000086 2620
000087 4520
000088 5544
000089 0020      	.DB  0x20,0x26,0x20,0x45,0x44,0x55,0x20,0x0
00008a 2020
00008b 5241
00008c 204d
00008d 6544      	.DB  0x20,0x20,0x41,0x52,0x4D,0x20,0x44,0x65
00008e 2076
00008f 2026
000090 4445
000091 2055      	.DB  0x76,0x20,0x26,0x20,0x45,0x44,0x55,0x20
000092 2000
000093 4150
000094 5344
000095 4420      	.DB  0x0,0x20,0x50,0x41,0x44,0x53,0x20,0x44
000096 7665
000097 2620
000098 4520
000099 5544      	.DB  0x65,0x76,0x20,0x26,0x20,0x45,0x44,0x55
00009a 0020
00009b 2020
00009c 4320
00009d 7269      	.DB  0x20,0x0,0x20,0x20,0x20,0x43,0x69,0x72
00009e 7571
00009f 7469
0000a0 4520
0000a1 5544      	.DB  0x71,0x75,0x69,0x74,0x20,0x45,0x44,0x55
0000a2 2020
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1144): warning: .cseg .db misalignment - padding zero byte
0000a3 0000      	.DB  0x20,0x20,0x0
                 _tbl10_G100:
0000a4 2710
0000a5 03e8
0000a6 0064
0000a7 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
0000a8 0001      	.DB  0x1,0x0
                 _tbl16_G100:
0000a9 1000
0000aa 0100
0000ab 0010
0000ac 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
0000ad 0000      	.DW  0x0000
                 
                 _0x4:
0000ae 0500
0000af 03af
0000b0 0505
0000b1 03b8      	.DB  LOW(_0x3),HIGH(_0x3),LOW(_help_func),HIGH(_help_func),LOW(_0x3+5),HIGH(_0x3+5),LOW(_show_func),HIGH(_show_func)
0000b2 050a
0000b3 03d1
0000b4 0510
0000b5 0409      	.DB  LOW(_0x3+10),HIGH(_0x3+10),LOW(_blink_func),HIGH(_blink_func),LOW(_0x3+16),HIGH(_0x3+16),LOW(_led_func),HIGH(_led_func)
0000b6 0514
0000b7 04b1
0000b8 0518
0000b9 052a      	.DB  LOW(_0x3+20),HIGH(_0x3+20),LOW(_lcd_func),HIGH(_lcd_func),LOW(_0x3+24),HIGH(_0x3+24),LOW(_led7_func),HIGH(_led7_func)
                 _0x16:
0000ba 0000
0000bb 0000
0000bc 0000
0000bd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000be 0000
0000bf 0000
0000c0 0000
0000c1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1162): warning: .cseg .db misalignment - padding zero byte
0000c2 0000      	.DB  0x0
                 _0x2B:
0000c3 0000
0000c4 0000
0000c5 0000
0000c6 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c7 0000
0000c8 0000
0000c9 0000
0000ca 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000cb 0000
0000cc 0000
0000cd 0000
0000ce 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000cf 0000
0000d0 0000
0000d1 0000
0000d2 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d3 0000      	.DB  0x0,0x0
                 _0x0:
0000d4 6568
0000d5 706c
0000d6 7300
0000d7 6f68      	.DB  0x68,0x65,0x6C,0x70,0x0,0x73,0x68,0x6F
0000d8 0077
0000d9 6c62
0000da 6e69
0000db 006b      	.DB  0x77,0x0,0x62,0x6C,0x69,0x6E,0x6B,0x0
0000dc 656c
0000dd 0064
0000de 636c
0000df 0064      	.DB  0x6C,0x65,0x64,0x0,0x6C,0x63,0x64,0x0
0000e0 656c
0000e1 3764
0000e2 4800
0000e3 4c45      	.DB  0x6C,0x65,0x64,0x37,0x0,0x48,0x45,0x4C
0000e4 2050
0000e5 7566
0000e6 636e
0000e7 6974      	.DB  0x50,0x20,0x66,0x75,0x6E,0x63,0x74,0x69
0000e8 6e6f
0000e9 6520
0000ea 6578
0000eb 7563      	.DB  0x6F,0x6E,0x20,0x65,0x78,0x65,0x63,0x75
0000ec 6574
0000ed 0064
0000ee 680d
0000ef 6c65      	.DB  0x74,0x65,0x64,0x0,0xD,0x68,0x65,0x6C
0000f0 3a70
0000f1 4820
0000f2 6c65
0000f3 2070      	.DB  0x70,0x3A,0x20,0x48,0x65,0x6C,0x70,0x20
0000f4 7566
0000f5 636e
0000f6 6974
0000f7 6e6f      	.DB  0x66,0x75,0x6E,0x63,0x74,0x69,0x6F,0x6E
0000f8 0a20
0000f9 000d
0000fa 6c62
0000fb 6e69      	.DB  0x20,0xA,0xD,0x0,0x62,0x6C,0x69,0x6E
0000fc 3a6b
0000fd 4220
0000fe 696c
0000ff 6b6e      	.DB  0x6B,0x3A,0x20,0x42,0x6C,0x69,0x6E,0x6B
000100 6620
000101 6e75
000102 7463
000103 6f69      	.DB  0x20,0x66,0x75,0x6E,0x63,0x74,0x69,0x6F
000104 206e
000105 0d0a
000106 6c00
000107 6465      	.DB  0x6E,0x20,0xA,0xD,0x0,0x6C,0x65,0x64
000108 203a
000109 654c
00010a 2064
00010b 7566      	.DB  0x3A,0x20,0x4C,0x65,0x64,0x20,0x66,0x75
00010c 636e
00010d 6974
00010e 6e6f
00010f 0a20      	.DB  0x6E,0x63,0x74,0x69,0x6F,0x6E,0x20,0xA
000110 000d
000111 636c
000112 3a64
000113 4c20      	.DB  0xD,0x0,0x6C,0x63,0x64,0x3A,0x20,0x4C
000114 6463
000115 6620
000116 6e75
000117 7463      	.DB  0x63,0x64,0x20,0x66,0x75,0x6E,0x63,0x74
000118 6f69
000119 206e
00011a 0d0a
00011b 6c00      	.DB  0x69,0x6F,0x6E,0x20,0xA,0xD,0x0,0x6C
00011c 6465
00011d 3a37
00011e 4c20
00011f 6465      	.DB  0x65,0x64,0x37,0x3A,0x20,0x4C,0x65,0x64
000120 2037
000121 7566
000122 636e
000123 6974      	.DB  0x37,0x20,0x66,0x75,0x6E,0x63,0x74,0x69
000124 6e6f
000125 0a20
000126 000d
000127 682d      	.DB  0x6F,0x6E,0x20,0xA,0xD,0x0,0x2D,0x68
000128 6c65
000129 0070
00012a 4c42
00012b 4e49      	.DB  0x65,0x6C,0x70,0x0,0x42,0x4C,0x49,0x4E
00012c 204b
00012d 6568
00012e 706c
00012f 6d20      	.DB  0x4B,0x20,0x68,0x65,0x6C,0x70,0x20,0x6D
000130 6e65
000131 3a75
000132 0d20
000133 623c      	.DB  0x65,0x6E,0x75,0x3A,0x20,0xD,0x3C,0x62
000134 696c
000135 6b6e
000136 203e
000137 6f3c      	.DB  0x6C,0x69,0x6E,0x6B,0x3E,0x20,0x3C,0x6F
000138 2f6e
000139 666f
00013a 3e66
00013b 3c20      	.DB  0x6E,0x2F,0x6F,0x66,0x66,0x3E,0x20,0x3C
00013c 6176
00013d 756c
00013e 2865
00013f 2d31      	.DB  0x76,0x61,0x6C,0x75,0x65,0x28,0x31,0x2D
000140 383e
000141 3e29
000142 6f00
000143 006e      	.DB  0x3E,0x38,0x29,0x3E,0x0,0x6F,0x6E,0x0
000144 6365
000145 6f68
000146 203a
000147 6964      	.DB  0x65,0x63,0x68,0x6F,0x3A,0x20,0x64,0x69
000148 7073
000149 616c
00014a 2079
00014b 4200      	.DB  0x73,0x70,0x6C,0x61,0x79,0x20,0x0,0x42
00014c 494c
00014d 4b4e
00014e 6620
00014f 6e75      	.DB  0x4C,0x49,0x4E,0x4B,0x20,0x66,0x75,0x6E
000150 7463
000151 6f69
000152 206e
000153 7865      	.DB  0x63,0x74,0x69,0x6F,0x6E,0x20,0x65,0x78
000154 6365
000155 7475
000156 6465
000157 6500      	.DB  0x65,0x63,0x75,0x74,0x65,0x64,0x0,0x65
000158 6863
000159 3a6f
00015a 4c20
00015b 6465      	.DB  0x63,0x68,0x6F,0x3A,0x20,0x4C,0x65,0x64
00015c 6820
00015d 6c65
00015e 2070
00015f 656d      	.DB  0x20,0x68,0x65,0x6C,0x70,0x20,0x6D,0x65
000160 756e
000161 203a
000162 3c0d
000163 656c      	.DB  0x6E,0x75,0x3A,0x20,0xD,0x3C,0x6C,0x65
000164 3e64
000165 3c20
000166 6e6f
000167 6f2f      	.DB  0x64,0x3E,0x20,0x3C,0x6F,0x6E,0x2F,0x6F
000168 6666
000169 203e
00016a 763c
00016b 6c61      	.DB  0x66,0x66,0x3E,0x20,0x3C,0x76,0x61,0x6C
00016c 6575
00016d 3128
00016e 3e2d
00016f 2938      	.DB  0x75,0x65,0x28,0x31,0x2D,0x3E,0x38,0x29
000170 003e
000171 6365
000172 6f68
000173 203a      	.DB  0x3E,0x0,0x65,0x63,0x68,0x6F,0x3A,0x20
000174 7554
000175 6e72
000176 6f20
000177 206e      	.DB  0x54,0x75,0x72,0x6E,0x20,0x6F,0x6E,0x20
000178 656c
000179 2064
00017a 6100
00017b 6c6c      	.DB  0x6C,0x65,0x64,0x20,0x0,0x61,0x6C,0x6C
00017c 6500
00017d 6863
00017e 3a6f
00017f 4120      	.DB  0x0,0x65,0x63,0x68,0x6F,0x3A,0x20,0x41
000180 6c6c
000181 6c20
000182 6465
000183 7720      	.DB  0x6C,0x6C,0x20,0x6C,0x65,0x64,0x20,0x77
000184 7361
000185 6f20
000186 006e
000187 7554      	.DB  0x61,0x73,0x20,0x6F,0x6E,0x0,0x54,0x75
000188 6e72
000189 6f20
00018a 206e
00018b 6c61      	.DB  0x72,0x6E,0x20,0x6F,0x6E,0x20,0x61,0x6C
00018c 206c
00018d 656c
00018e 0064
00018f 666f      	.DB  0x6C,0x20,0x6C,0x65,0x64,0x0,0x6F,0x66
000190 0066
000191 6365
000192 6f68
000193 203a      	.DB  0x66,0x0,0x65,0x63,0x68,0x6F,0x3A,0x20
000194 7554
000195 6e72
000196 6f20
000197 6666      	.DB  0x54,0x75,0x72,0x6E,0x20,0x6F,0x66,0x66
000198 6c20
000199 6465
00019a 0020
00019b 6365      	.DB  0x20,0x6C,0x65,0x64,0x20,0x0,0x65,0x63
00019c 6f68
00019d 203a
00019e 6c41
00019f 206c      	.DB  0x68,0x6F,0x3A,0x20,0x41,0x6C,0x6C,0x20
0001a0 656c
0001a1 2064
0001a2 6177
0001a3 2073      	.DB  0x6C,0x65,0x64,0x20,0x77,0x61,0x73,0x20
0001a4 666f
0001a5 0066
0001a6 7554
0001a7 6e72      	.DB  0x6F,0x66,0x66,0x0,0x54,0x75,0x72,0x6E
0001a8 6f20
0001a9 6666
0001aa 6120
0001ab 6c6c      	.DB  0x20,0x6F,0x66,0x66,0x20,0x61,0x6C,0x6C
0001ac 6c20
0001ad 6465
0001ae 4c00
0001af 6465      	.DB  0x20,0x6C,0x65,0x64,0x0,0x4C,0x65,0x64
0001b0 6620
0001b1 6e75
0001b2 7463
0001b3 6f69      	.DB  0x20,0x66,0x75,0x6E,0x63,0x74,0x69,0x6F
0001b4 206e
0001b5 7865
0001b6 6365
0001b7 7475      	.DB  0x6E,0x20,0x65,0x78,0x65,0x63,0x75,0x74
0001b8 6465
0001b9 6500
0001ba 6863
0001bb 3a6f      	.DB  0x65,0x64,0x0,0x65,0x63,0x68,0x6F,0x3A
0001bc 4c20
0001bd 6463
0001be 6820
0001bf 6c65      	.DB  0x20,0x4C,0x63,0x64,0x20,0x68,0x65,0x6C
0001c0 2070
0001c1 656d
0001c2 756e
0001c3 203a      	.DB  0x70,0x20,0x6D,0x65,0x6E,0x75,0x3A,0x20
0001c4 3c0d
0001c5 636c
0001c6 3e64
0001c7 3c20      	.DB  0xD,0x3C,0x6C,0x63,0x64,0x3E,0x20,0x3C
0001c8 6964
0001c9 7073
0001ca 203e
0001cb 743c      	.DB  0x64,0x69,0x73,0x70,0x3E,0x20,0x3C,0x74
0001cc 7865
0001cd 3e74
0001ce 6400
0001cf 7369      	.DB  0x65,0x78,0x74,0x3E,0x0,0x64,0x69,0x73
0001d0 0070
0001d1 6365
0001d2 6f68
0001d3 203a      	.DB  0x70,0x0,0x65,0x63,0x68,0x6F,0x3A,0x20
0001d4 6944
0001d5 7073
0001d6 616c
0001d7 2079      	.DB  0x44,0x69,0x73,0x70,0x6C,0x61,0x79,0x20
0001d8 6e6f
0001d9 4c20
0001da 4443
0001db 4c00      	.DB  0x6F,0x6E,0x20,0x4C,0x43,0x44,0x0,0x4C
0001dc 4445
0001dd 2037
0001de 6568
0001df 706c      	.DB  0x45,0x44,0x37,0x20,0x68,0x65,0x6C,0x70
0001e0 6d20
0001e1 6e65
0001e2 3a75
0001e3 0d20      	.DB  0x20,0x6D,0x65,0x6E,0x75,0x3A,0x20,0xD
0001e4 6c3c
0001e5 6465
0001e6 3e37
0001e7 3c20      	.DB  0x3C,0x6C,0x65,0x64,0x37,0x3E,0x20,0x3C
0001e8 6964
0001e9 7073
0001ea 203e
0001eb 763c      	.DB  0x64,0x69,0x73,0x70,0x3E,0x20,0x3C,0x76
0001ec 6c61
0001ed 6575
0001ee 3128
0001ef 3e2d      	.DB  0x61,0x6C,0x75,0x65,0x28,0x31,0x2D,0x3E
0001f0 2938
0001f1 003e
0001f2 654c
0001f3 3764      	.DB  0x38,0x29,0x3E,0x0,0x4C,0x65,0x64,0x37
0001f4 6620
0001f5 6e75
0001f6 7463
0001f7 6f69      	.DB  0x20,0x66,0x75,0x6E,0x63,0x74,0x69,0x6F
0001f8 206e
0001f9 7865
0001fa 6365
0001fb 7475      	.DB  0x6E,0x20,0x65,0x78,0x65,0x63,0x75,0x74
0001fc 6465
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1244): warning: .cseg .db misalignment - padding zero byte
0001fd 0000      	.DB  0x65,0x64,0x0
                 _0x60003:
0001fe 0201
0001ff 0804
000200 2010
000201 8040      	.DB  0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80
                 _0x60004:
000202 dbe7
000203 bdbd
000204 bd81
000205 bdbd      	.DB  0xE7,0xDB,0xBD,0xBD,0x81,0xBD,0xBD,0xBD
000206 bdc1
000207 c1bd
000208 bddd
000209 c1bd      	.DB  0xC1,0xBD,0xBD,0xC1,0xDD,0xBD,0xBD,0xC1
00020a bdc3
00020b fdfd
00020c bdfd
00020d c3bd      	.DB  0xC3,0xBD,0xFD,0xFD,0xFD,0xBD,0xBD,0xC3
00020e bdc1
00020f bdbd
000210 bdbd
000211 c1bd      	.DB  0xC1,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xC1
000212 fd81
000213 81fd
000214 fdfd
000215 81fd      	.DB  0x81,0xFD,0xFD,0x81,0xFD,0xFD,0xFD,0x81
000216 fd81
000217 81fd
000218 fdfd
000219 fdfd      	.DB  0x81,0xFD,0xFD,0x81,0xFD,0xFD,0xFD,0xFD
00021a d9e7
00021b fdbd
00021c bd8d
00021d e7db      	.DB  0xE7,0xD9,0xBD,0xFD,0x8D,0xBD,0xDB,0xE7
00021e bdbd
00021f 81bd
000220 bdbd
000221 bdbd      	.DB  0xBD,0xBD,0xBD,0x81,0xBD,0xBD,0xBD,0xBD
000222 e7c3
000223 e7e7
000224 e7e7
000225 c3e7      	.DB  0xC3,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xC3
000226 e7c3
000227 e7e7
000228 e5e7
000229 fbf5      	.DB  0xC3,0xE7,0xE7,0xE7,0xE7,0xE5,0xF5,0xFB
00022a eddd
00022b f9f5
00022c edf5
00022d bddd      	.DB  0xDD,0xED,0xF5,0xF9,0xF5,0xED,0xDD,0xBD
00022e fdfd
00022f fdfd
000230 fdfd
000231 81fd      	.DB  0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0x81
000232 99bd
000233 a5a5
000234 bda5
000235 bdbd      	.DB  0xBD,0x99,0xA5,0xA5,0xA5,0xBD,0xBD,0xBD
000236 bdbd
000237 b5b9
000238 9dad
000239 bdbd      	.DB  0xBD,0xBD,0xB9,0xB5,0xAD,0x9D,0xBD,0xBD
00023a dbe7
00023b bdbd
00023c bdbd
00023d e7db      	.DB  0xE7,0xDB,0xBD,0xBD,0xBD,0xBD,0xDB,0xE7
00023e dde1
00023f dddd
000240 fde1
000241 fdfd      	.DB  0xE1,0xDD,0xDD,0xDD,0xE1,0xFD,0xFD,0xFD
000242 dde3
000243 dddd
000244 cdd5
000245 bfc3      	.DB  0xE3,0xDD,0xDD,0xDD,0xD5,0xCD,0xC3,0xBF
000246 bdc1
000247 c1bd
000248 bddd
000249 bdbd      	.DB  0xC1,0xBD,0xBD,0xC1,0xDD,0xBD,0xBD,0xBD
00024a bdc3
00024b c3fd
00024c bfbf
00024d c3bd      	.DB  0xC3,0xBD,0xFD,0xC3,0xBF,0xBF,0xBD,0xC3
00024e e781
00024f e7e7
000250 e7e7
000251 e7e7      	.DB  0x81,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7,0xE7
000252 bdbd
000253 bdbd
000254 bdbd
000255 c3bd      	.DB  0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xC3
000256 bdbd
000257 bdbd
000258 bdbd
000259 e7db      	.DB  0xBD,0xBD,0xBD,0xBD,0xBD,0xBD,0xDB,0xE7
00025a bdbd
00025b bdbd
00025c a5a5
00025d 99a5      	.DB  0xBD,0xBD,0xBD,0xBD,0xA5,0xA5,0xA5,0x99
00025e bdbd
00025f e7d9
000260 dbe7
000261 bdbd      	.DB  0xBD,0xBD,0xD9,0xE7,0xE7,0xDB,0xBD,0xBD
000262 bdbd
000263 dbbd
000264 e7e7
000265 e7e7      	.DB  0xBD,0xBD,0xBD,0xDB,0xE7,0xE7,0xE7,0xE7
000266 bf81
000267 efdf
000268 fbf7
000269 81fd      	.DB  0x81,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0x81
                 _0x80003:
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1275): warning: .cseg .db misalignment - padding zero byte
00026a 0006      	.DB  0x6
                 _0x80022:
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1277): warning: .cseg .db misalignment - padding zero byte
00026b 0000      	.DB  0x0
                 _0xC0003:
00026c 3e3e
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1279): warning: .cseg .db misalignment - padding zero byte
00026d 0020      	.DB  0x3E,0x3E,0x20
                 _0xC0004:
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1281): warning: .cseg .db misalignment - padding zero byte
00026e 000d      	.DB  0xD
                 _0xC0006:
00026f 079b
000270 079e      	.DB  LOW(_0xC0005),HIGH(_0xC0005),LOW(_0xC0005+3),HIGH(_0xC0005+3)
                 _0xC0000:
000271 4b4f
000272 4300
000273 6d6f
000274 616d      	.DB  0x4F,0x4B,0x0,0x43,0x6F,0x6D,0x6D,0x61
000275 646e
000276 6e20
000277 746f
000278 7220      	.DB  0x6E,0x64,0x20,0x6E,0x6F,0x74,0x20,0x72
000279 6365
00027a 676f
00027b 696e
00027c 6573      	.DB  0x65,0x63,0x6F,0x67,0x6E,0x69,0x73,0x65
00027d 0064
00027e 0020      	.DB  0x64,0x0,0x20,0x0
                 _0xE0003:
00027f 063f
000280 4f5b
000281 6d66
000282 277d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x27
000283 6f7f      	.DB  0x7F,0x6F
                 _0x2040060:
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1293): warning: .cseg .db misalignment - padding zero byte
000284 0001      	.DB  0x1
                 _0x2040000:
000285 4e2d
000286 4e41
000287 4900
000288 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Embedded\AVR-ATmega128F\Sample\CodvisionAVR_AVRStudio\COMM_EchoTest\List\Comm_EchoTest.asm(1296): warning: .cseg .db misalignment - padding zero byte
000289 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00028a 0001      	.DW  0x01
00028b 0002      	.DW  0x02
00028c 015a      	.DW  __REG_BIT_VARS*2
                 
00028d 0005      	.DW  0x05
00028e 0500      	.DW  _0x3
00028f 01a8      	.DW  _0x0*2
                 
000290 0005      	.DW  0x05
000291 0505      	.DW  _0x3+5
000292 01ad      	.DW  _0x0*2+5
                 
000293 0006      	.DW  0x06
000294 050a      	.DW  _0x3+10
000295 01b2      	.DW  _0x0*2+10
                 
000296 0004      	.DW  0x04
000297 0510      	.DW  _0x3+16
000298 01b8      	.DW  _0x0*2+16
                 
000299 0004      	.DW  0x04
00029a 0514      	.DW  _0x3+20
00029b 01bc      	.DW  _0x0*2+20
                 
00029c 0005      	.DW  0x05
00029d 0518      	.DW  _0x3+24
00029e 01c0      	.DW  _0x0*2+24
                 
00029f 0018      	.DW  0x18
0002a0 07cc      	.DW  _cmd_tbl
0002a1 015c      	.DW  _0x4*2
                 
0002a2 0017      	.DW  0x17
0002a3 051d      	.DW  _0xC
0002a4 01c5      	.DW  _0x0*2+29
                 
0002a5 0018      	.DW  0x18
0002a6 0534      	.DW  _0xD
0002a7 01dc      	.DW  _0x0*2+52
                 
0002a8 0019      	.DW  0x19
0002a9 054c      	.DW  _0xD+24
0002aa 01f4      	.DW  _0x0*2+76
                 
0002ab 0015      	.DW  0x15
0002ac 0565      	.DW  _0xD+49
0002ad 020d      	.DW  _0x0*2+101
                 
0002ae 0015      	.DW  0x15
0002af 057a      	.DW  _0xD+70
0002b0 0222      	.DW  _0x0*2+122
                 
0002b1 0017      	.DW  0x17
0002b2 058f      	.DW  _0xD+91
0002b3 0237      	.DW  _0x0*2+143
                 
0002b4 0006      	.DW  0x06
0002b5 05a6      	.DW  _0x10
0002b6 024e      	.DW  _0x0*2+166
                 
0002b7 0031      	.DW  0x31
0002b8 05ac      	.DW  _0x10+6
0002b9 0254      	.DW  _0x0*2+172
                 
0002ba 0003      	.DW  0x03
0002bb 05dd      	.DW  _0x10+55
0002bc 0285      	.DW  _0x0*2+221
                 
0002bd 000f      	.DW  0x0F
0002be 05e0      	.DW  _0x10+58
0002bf 0288      	.DW  _0x0*2+224
                 
0002c0 0018      	.DW  0x18
0002c1 05ef      	.DW  _0x10+73
0002c2 0297      	.DW  _0x0*2+239
                 
0002c3 0006      	.DW  0x06
0002c4 0607      	.DW  _0x19
0002c5 024e      	.DW  _0x0*2+166
                 
0002c6 0033      	.DW  0x33
0002c7 060d      	.DW  _0x19+6
0002c8 02af      	.DW  _0x0*2+263
                 
0002c9 0003      	.DW  0x03
0002ca 0640      	.DW  _0x19+57
0002cb 0285      	.DW  _0x0*2+221
                 
0002cc 0013      	.DW  0x13
0002cd 0643      	.DW  _0x19+60
0002ce 02e2      	.DW  _0x0*2+314
                 
0002cf 000d      	.DW  0x0D
0002d0 0656      	.DW  _0x19+79
0002d1 02e8      	.DW  _0x0*2+320
                 
0002d2 0004      	.DW  0x04
0002d3 0663      	.DW  _0x19+92
0002d4 02f5      	.DW  _0x0*2+333
                 
0002d5 0015      	.DW  0x15
0002d6 0667      	.DW  _0x19+96
0002d7 02f9      	.DW  _0x0*2+337
                 
0002d8 0010      	.DW  0x10
0002d9 067c      	.DW  _0x19+117
0002da 030e      	.DW  _0x0*2+358
                 
0002db 0004      	.DW  0x04
0002dc 068c      	.DW  _0x19+133
0002dd 031e      	.DW  _0x0*2+374
                 
0002de 0014      	.DW  0x14
0002df 0690      	.DW  _0x19+137
0002e0 0322      	.DW  _0x0*2+378
                 
0002e1 000e      	.DW  0x0E
0002e2 06a4      	.DW  _0x19+157
0002e3 0328      	.DW  _0x0*2+384
                 
0002e4 0004      	.DW  0x04
0002e5 06b2      	.DW  _0x19+171
0002e6 02f5      	.DW  _0x0*2+333
                 
0002e7 0016      	.DW  0x16
0002e8 06b6      	.DW  _0x19+175
0002e9 0336      	.DW  _0x0*2+398
                 
0002ea 0011      	.DW  0x11
0002eb 06cc      	.DW  _0x19+197
0002ec 034c      	.DW  _0x0*2+420
                 
0002ed 0016      	.DW  0x16
0002ee 06dd      	.DW  _0x19+214
0002ef 035d      	.DW  _0x0*2+437
                 
0002f0 0006      	.DW  0x06
0002f1 06f3      	.DW  _0x2E
0002f2 024e      	.DW  _0x0*2+166
                 
0002f3 002a      	.DW  0x2A
0002f4 06f9      	.DW  _0x2E+6
0002f5 0373      	.DW  _0x0*2+459
                 
0002f6 0005      	.DW  0x05
0002f7 0723      	.DW  _0x2E+48
0002f8 039d      	.DW  _0x0*2+501
                 
0002f9 0015      	.DW  0x15
0002fa 0728      	.DW  _0x2E+53
0002fb 03a2      	.DW  _0x0*2+506
                 
0002fc 0006      	.DW  0x06
0002fd 073d      	.DW  _0x3A
0002fe 024e      	.DW  _0x0*2+166
                 
0002ff 002d      	.DW  0x2D
000300 0743      	.DW  _0x3A+6
000301 03b7      	.DW  _0x0*2+527
                 
000302 0005      	.DW  0x05
000303 0770      	.DW  _0x3A+51
000304 039d      	.DW  _0x0*2+501
                 
000305 000f      	.DW  0x0F
000306 0775      	.DW  _0x3A+56
000307 0288      	.DW  _0x0*2+224
                 
000308 0017      	.DW  0x17
000309 0784      	.DW  _0x3A+71
00030a 03e4      	.DW  _0x0*2+572
                 
00030b 0008      	.DW  0x08
00030c 07e6      	.DW  _vertical
00030d 03fc      	.DW  _0x60003*2
                 
00030e 00d0      	.DW  0xD0
00030f 07ee      	.DW  _english
000310 0404      	.DW  _0x60004*2
                 
000311 0001      	.DW  0x01
000312 08d5      	.DW  _num_cnt2
000313 04d4      	.DW  _0x80003*2
                 
000314 0001      	.DW  0x01
000315 0005      	.DW  0x05
000316 04d6      	.DW  _0x80022*2
                 
000317 0003      	.DW  0x03
000318 09d9      	.DW  _cli_prompt
000319 04d8      	.DW  _0xC0003*2
                 
00031a 0001      	.DW  0x01
00031b 09dd      	.DW  _cli_unrecog
00031c 04dc      	.DW  _0xC0004*2
                 
00031d 0003      	.DW  0x03
00031e 079b      	.DW  _0xC0005
00031f 04e2      	.DW  _0xC0000*2
                 
000320 0017      	.DW  0x17
000321 079e      	.DW  _0xC0005+3
000322 04e5      	.DW  _0xC0000*2+3
                 
000323 000a      	.DW  0x0A
000324 09df      	.DW  _Num
000325 04fe      	.DW  _0xE0003*2
                 
000326 0001      	.DW  0x01
000327 09ec      	.DW  __seed_G102
000328 0508      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000329 0000      	.DW  0
                 
                 __RESET:
00032a 94f8      	CLI
00032b 27ee      	CLR  R30
00032c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00032d e0f1      	LDI  R31,1
00032e bff5      	OUT  MCUCR,R31
00032f bfe5      	OUT  MCUCR,R30
000330 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000332 e1f8      	LDI  R31,0x18
000333 bdf1      	OUT  WDTCR,R31
000334 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000335 e08d      	LDI  R24,(14-2)+1
000336 e0a2      	LDI  R26,2
000337 27bb      	CLR  R27
                 __CLEAR_REG:
000338 93ed      	ST   X+,R30
000339 958a      	DEC  R24
00033a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00033b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00033c e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00033d e0a0      	LDI  R26,LOW(__SRAM_START)
00033e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00033f 93ed      	ST   X+,R30
000340 9701      	SBIW R24,1
000341 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000342 e1e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000343 e0f5      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000344 9185      	LPM  R24,Z+
000345 9195      	LPM  R25,Z+
000346 9700      	SBIW R24,0
000347 f061      	BREQ __GLOBAL_INI_END
000348 91a5      	LPM  R26,Z+
000349 91b5      	LPM  R27,Z+
00034a 9005      	LPM  R0,Z+
00034b 9015      	LPM  R1,Z+
00034c 01bf      	MOVW R22,R30
00034d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00034e 9005      	LPM  R0,Z+
00034f 920d      	ST   X+,R0
000350 9701      	SBIW R24,1
000351 f7e1      	BRNE __GLOBAL_INI_LOOP
000352 01fb      	MOVW R30,R22
000353 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000354 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000355 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000356 bfed      	OUT  SPL,R30
000357 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000358 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000359 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00035a e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00035b 940c 035d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h> // Standard Input/Output functions
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include "uart.h"
                 ;#include "sw.h"
                 ;#include "dotmat.h"
                 ;#include "clcd.h"
                 ;#include "cli.h"
                 ;#include "led7.h"
                 ;
                 ;extern char rx_buffer0[RX_BUFFER_SIZE0];
                 ;extern unsigned int rx_wr_index0,rx_counter0;
                 ;extern bit rx_buffer_overflow0; // This flag is set on USART0 Receiver buffer overflow
                 ;extern cli_t cli;
                 ;cli_t cli;
                 ;
                 ;void SystemInit(void);
                 ;void user_uart_println(char *string);
                 ;cli_status_t help_func(int argc, char **argv);
                 ;cli_status_t blink_func(int argc, char **argv);
                 ;cli_status_t led_func(int argc, char **argv);
                 ;cli_status_t lcd_func(int argc, char **argv);
                 ;cli_status_t led7_func(int argc, char **argv);
                 ;cli_status_t show_func(int argc, char **argv);
                 ;
                 ;
                 ;cmd_t cmd_tbl[] = { {"help",help_func},
                 ;                    {"show",show_func},
                 ;                    {"blink",blink_func},
                 ;                    {"led",led_func},
                 ;                    {"lcd",lcd_func},
                 ;                    {"led7",led7_func}};
                 
                 	.DSEG
                 _0x3:
000500           	.BYTE 0x1D
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0029     SystemInit();
00035d d025      	RCALL _SystemInit
                 ; 0000 002A     Uart0Init();
00035e 940e 05a5 	CALL _Uart0Init
                 ; 0000 002B     LedInit();
000360 d21b      	RCALL _LedInit
                 ; 0000 002C     DotMatInit();
000361 940e 05b2 	CALL _DotMatInit
                 ; 0000 002D     Led7Init();
000363 940e 079d 	CALL _Led7Init
                 ; 0000 002E     LcdInit();
000365 940e 0679 	CALL _LcdInit
                 ; 0000 002F 
                 ; 0000 0030     cli.println = user_uart_println;
000367 e9e5      	LDI  R30,LOW(_user_uart_println)
000368 e0f3      	LDI  R31,HIGH(_user_uart_println)
000369 93e0 07c6 	STS  _cli,R30
00036b 93f0 07c7 	STS  _cli+1,R31
                 ; 0000 0031     cli.cmd_tbl = cmd_tbl;
00036d ecec      	LDI  R30,LOW(_cmd_tbl)
00036e e0f7      	LDI  R31,HIGH(_cmd_tbl)
                +
00036f 93e0 07c8+STS _cli + ( 2 ) , R30
000371 93f0 07c9+STS _cli + ( 2 ) + 1 , R31
                 	__PUTW1MN _cli,2
                 ; 0000 0032     cli.cmd_cnt = sizeof(cmd_tbl)/sizeof(cmd_t);
000373 e0e6      	LDI  R30,LOW(6)
000374 e0f0      	LDI  R31,HIGH(6)
                +
000375 93e0 07ca+STS _cli + ( 4 ) , R30
000377 93f0 07cb+STS _cli + ( 4 ) + 1 , R31
                 	__PUTW1MN _cli,4
                 ; 0000 0033     cli_init(&cli);
000379 eca6      	LDI  R26,LOW(_cli)
00037a e0b7      	LDI  R27,HIGH(_cli)
00037b 940e 06a2 	CALL _cli_init
                 ; 0000 0034 
                 ; 0000 0035 
                 ; 0000 0036     while(1)
                 _0x5:
                 ; 0000 0037     {
                 ; 0000 0038 
                 ; 0000 0039         cli_process(&cli);
00037d eca6      	LDI  R26,LOW(_cli)
00037e e0b7      	LDI  R27,HIGH(_cli)
00037f 940e 06ab 	CALL _cli_process
                 ; 0000 003A     }
000381 cffb      	RJMP _0x5
                 ; 0000 003B 
                 ; 0000 003C }
                 _0x8:
000382 cfff      	RJMP _0x8
                 ;
                 ;
                 ;
                 ;
                 ;void SystemInit(void)
                 ; 0000 0042 {
                 _SystemInit:
                 ; 0000 0043     //---External I/O initialization
                 ; 0000 0044 	LED_CON=0X00;       // LED GLCD Control bus
000383 e0e0      	LDI  R30,LOW(0)
000384 93e0 8000 	STS  32768,R30
                 ; 0000 0045 	SET_CON=0X00;       // FND, Buzzer, RELAY Control bus
000386 93e0 8100 	STS  33024,R30
                 ; 0000 0046 	LCD_CON=0X00;       // TLCD, GLCD Control bus
000388 940e 08ab 	CALL SUBOPT_0x0
                 ; 0000 0047 	LCD_DATABUS=0X00;   // TLCD, GLCD, FND, Dotmatrix Data bus
                 ; 0000 0048 	DOT_YELLOW=0X00;    // Dotmatrix Yellow LED
00038a e0e0      	LDI  R30,LOW(0)
00038b 93e0 8400 	STS  33792,R30
                 ; 0000 0049 	DOT_RED=0X00;       // Dotmatrix Yellow RED
00038d 93e0 8500 	STS  34048,R30
                 ; 0000 004A 	STEPMOR=0X00;       // Stepping Motor Control bus
00038f 93e0 8600 	STS  34304,R30
                 ; 0000 004B 	DCSERVO=0X00;       // DC, Servo Motor Control bus
000391 93e0 8700 	STS  34560,R30
                 ; 0000 004C     //----------------------------------------
                 ; 0000 004D     #asm("sei") // Global enable interrupts
000393 9478      	sei
                 ; 0000 004E }
000394 9508      	RET
                 ;
                 ;
                 ;void user_uart_println(char *string)
                 ; 0000 0052 {
                 _user_uart_println:
                 ; 0000 0053     int i = 0;
                 ; 0000 0054     int size = strlen(string);
                 ; 0000 0055     for(i=0;i<size;i++)
000395 940e 08b1 	CALL SUBOPT_0x1
                 ;	*string -> Y+4
                 ;	i -> R16,R17
                 ;	size -> R18,R19
                +
000397 e000     +LDI R16 , LOW ( 0 )
000398 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000399 940e 08b6 	CALL SUBOPT_0x2
00039b 019f      	MOVW R18,R30
                +
00039c e000     +LDI R16 , LOW ( 0 )
00039d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xA:
                +
00039e 1702     +CP R16 , R18
00039f 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0003a0 f454      	BRGE _0xB
                 ; 0000 0056     {
                 ; 0000 0057         UartSend(string[i]);
0003a1 01f8      	MOVW R30,R16
0003a2 940e 08ba 	CALL SUBOPT_0x3
0003a4 91ac      	LD   R26,X
0003a5 27bb      	CLR  R27
0003a6 940e 0580 	CALL _UartSend
                 ; 0000 0058     }
                +
0003a8 5f0f     +SUBI R16 , LOW ( - 1 )
0003a9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003aa cff3      	RJMP _0xA
                 _0xB:
                 ; 0000 0059 }
0003ab 940e 09b1 	CALL __LOADLOCR4
0003ad 940c 085e 	JMP  _0x20A0002
                 ;
                 ;cli_status_t help_func(int argc, char **argv)
                 ; 0000 005C {
                 _help_func:
                 ; 0000 005D     cli.println("HELP function executed");
0003af 93ba      	ST   -Y,R27
0003b0 93aa      	ST   -Y,R26
                 ;	argc -> Y+2
                 ;	*argv -> Y+0
                +
0003b1 e1ad     +LDI R26 , LOW ( _0xC + ( 0 ) )
0003b2 e0b5     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
0003b3 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 005E     return CLI_OK;
0003b5 e0e0      	LDI  R30,LOW(0)
0003b6 940c 0816 	JMP  _0x20A0004
                 ; 0000 005F }
                 
                 	.DSEG
                 _0xC:
00051d           	.BYTE 0x17
                 ;
                 ;cli_status_t show_func(int argc, char **argv)
                 ; 0000 0062 {
                 
                 	.CSEG
                 _show_func:
                 ; 0000 0063     cli.println("\rhelp: Help function \n\r");
0003b8 93ba      	ST   -Y,R27
0003b9 93aa      	ST   -Y,R26
                 ;	argc -> Y+2
                 ;	*argv -> Y+0
                +
0003ba e3a4     +LDI R26 , LOW ( _0xD + ( 0 ) )
0003bb e0b5     +LDI R27 , HIGH ( _0xD + ( 0 ) )
                 	__POINTW2MN _0xD,0
0003bc 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0064     cli.println("blink: Blink function \n\r");
                +
0003be e4ac     +LDI R26 , LOW ( _0xD + ( 24 ) )
0003bf e0b5     +LDI R27 , HIGH ( _0xD + ( 24 ) )
                 	__POINTW2MN _0xD,24
0003c0 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0065     cli.println("led: Led function \n\r");
                +
0003c2 e6a5     +LDI R26 , LOW ( _0xD + ( 49 ) )
0003c3 e0b5     +LDI R27 , HIGH ( _0xD + ( 49 ) )
                 	__POINTW2MN _0xD,49
0003c4 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0066     cli.println("lcd: Lcd function \n\r");
                +
0003c6 e7aa     +LDI R26 , LOW ( _0xD + ( 70 ) )
0003c7 e0b5     +LDI R27 , HIGH ( _0xD + ( 70 ) )
                 	__POINTW2MN _0xD,70
0003c8 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0067     cli.println("led7: Led7 function \n\r");
                +
0003ca e8af     +LDI R26 , LOW ( _0xD + ( 91 ) )
0003cb e0b5     +LDI R27 , HIGH ( _0xD + ( 91 ) )
                 	__POINTW2MN _0xD,91
0003cc 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0068 
                 ; 0000 0069     return CLI_OK;
0003ce e0e0      	LDI  R30,LOW(0)
0003cf 940c 0816 	JMP  _0x20A0004
                 ; 0000 006A }
                 
                 	.DSEG
                 _0xD:
000534           	.BYTE 0x72
                 ;
                 ;cli_status_t blink_func(int argc, char **argv)
                 ; 0000 006D {
                 
                 	.CSEG
                 _blink_func:
                 ; 0000 006E     int value;
                 ; 0000 006F     if(argc > 0)
0003d1 940e 08c5 	CALL SUBOPT_0x5
                 ;	argc -> Y+4
                 ;	*argv -> Y+2
                 ;	value -> R16,R17
0003d3 f554      	BRGE _0xE
                 ; 0000 0070     {
                 ; 0000 0071         if(strcmp(argv[1], "-help") == 0)
0003d4 940e 08ce 	CALL SUBOPT_0x6
                +
0003d6 eaa6     +LDI R26 , LOW ( _0x10 + ( 0 ) )
0003d7 e0b5     +LDI R27 , HIGH ( _0x10 + ( 0 ) )
                 	__POINTW2MN _0x10,0
0003d8 940e 07bf 	CALL _strcmp
0003da 30e0      	CPI  R30,0
0003db f421      	BRNE _0xF
                 ; 0000 0072         {
                 ; 0000 0073             cli.println("BLINK help menu: \r<blink> <on/off> <value(1->8)>");
                +
0003dc eaac     +LDI R26 , LOW ( _0x10 + ( 6 ) )
0003dd e0b5     +LDI R27 , HIGH ( _0x10 + ( 6 ) )
                 	__POINTW2MN _0x10,6
0003de 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0074         }
                 ; 0000 0075 
                 ; 0000 0076         if(strcmp(argv[1], "on") == 0)
                 _0xF:
0003e0 940e 08ce 	CALL SUBOPT_0x6
                +
0003e2 edad     +LDI R26 , LOW ( _0x10 + ( 55 ) )
0003e3 e0b5     +LDI R27 , HIGH ( _0x10 + ( 55 ) )
                 	__POINTW2MN _0x10,55
0003e4 940e 07bf 	CALL _strcmp
0003e6 30e0      	CPI  R30,0
0003e7 f4b1      	BRNE _0x11
                 ; 0000 0077         {
                 ; 0000 0078             value = atoi(argv[2]);
0003e8 940e 08d5 	CALL SUBOPT_0x7
0003ea 940e 0860 	CALL _atoi
0003ec 018f      	MOVW R16,R30
                 ; 0000 0079             if(value >= 0 && value < 10)
0003ed 2311      	TST  R17
0003ee f022      	BRMI _0x13
                +
0003ef 300a     +CPI R16 , LOW ( 10 )
0003f0 e0e0     +LDI R30 , HIGH ( 10 )
0003f1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0003f2 f00c      	BRLT _0x14
                 _0x13:
0003f3 c00a      	RJMP _0x12
                 _0x14:
                 ; 0000 007A             {
                 ; 0000 007B                 Led7Disp1(value);
0003f4 01d8      	MOVW R26,R16
0003f5 940e 07a0 	CALL _Led7Disp1
                 ; 0000 007C                 cli.println("echo: display ");
                +
0003f7 eea0     +LDI R26 , LOW ( _0x10 + ( 58 ) )
0003f8 e0b5     +LDI R27 , HIGH ( _0x10 + ( 58 ) )
                 	__POINTW2MN _0x10,58
0003f9 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 007D                 user_uart_println(argv[2]);
0003fb 940e 08d5 	CALL SUBOPT_0x7
0003fd df97      	RCALL _user_uart_println
                 ; 0000 007E             }
                 ; 0000 007F 
                 ; 0000 0080         }
                 _0x12:
                 ; 0000 0081 
                 ; 0000 0082     }
                 _0x11:
                 ; 0000 0083     if(argc == 0)
                 _0xE:
0003fe 81ec      	LDD  R30,Y+4
0003ff 81fd      	LDD  R31,Y+4+1
000400 9730      	SBIW R30,0
000401 f421      	BRNE _0x15
                 ; 0000 0084     {
                 ; 0000 0085         cli.println("BLINK function executed");
                +
000402 eeaf     +LDI R26 , LOW ( _0x10 + ( 73 ) )
000403 e0b5     +LDI R27 , HIGH ( _0x10 + ( 73 ) )
                 	__POINTW2MN _0x10,73
000404 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0086     }
                 ; 0000 0087     return CLI_OK;
                 _0x15:
000406 e0e0      	LDI  R30,LOW(0)
000407 940c 085c 	JMP  _0x20A0001
                 ; 0000 0088 }
                 
                 	.DSEG
                 _0x10:
0005a6           	.BYTE 0x61
                 ;
                 ;
                 ;cli_status_t led_func(int argc, char **argv)
                 ; 0000 008C {
                 
                 	.CSEG
                 _led_func:
                 ; 0000 008D     int value;
                 ; 0000 008E     char string [17]={0};
                 ; 0000 008F     if(argc > 0)
000409 93ba      	ST   -Y,R27
00040a 93aa      	ST   -Y,R26
00040b 9761      	SBIW R28,17
00040c e181      	LDI  R24,17
00040d e0a0      	LDI  R26,LOW(0)
00040e e0b0      	LDI  R27,HIGH(0)
00040f e7e4      	LDI  R30,LOW(_0x16*2)
000410 e0f1      	LDI  R31,HIGH(_0x16*2)
000411 940e 09b6 	CALL __INITLOCB
000413 931a      	ST   -Y,R17
000414 930a      	ST   -Y,R16
                 ;	argc -> Y+21
                 ;	*argv -> Y+19
                 ;	value -> R16,R17
                 ;	string -> Y+2
000415 89ad      	LDD  R26,Y+21
000416 89be      	LDD  R27,Y+21+1
000417 940e 09a4 	CALL __CPW02
000419 f014      	BRLT PC+3
00041a 940c 04a4 	JMP _0x17
                 ; 0000 0090     {
                 ; 0000 0091         if(strcmp(argv[1], "-help") == 0)
00041c 940e 08da 	CALL SUBOPT_0x8
                +
00041e e0a7     +LDI R26 , LOW ( _0x19 + ( 0 ) )
00041f e0b6     +LDI R27 , HIGH ( _0x19 + ( 0 ) )
                 	__POINTW2MN _0x19,0
000420 940e 07bf 	CALL _strcmp
000422 30e0      	CPI  R30,0
000423 f421      	BRNE _0x18
                 ; 0000 0092         {
                 ; 0000 0093             cli.println("echo: Led help menu: \r<led> <on/off> <value(1->8)>");
                +
000424 e0ad     +LDI R26 , LOW ( _0x19 + ( 6 ) )
000425 e0b6     +LDI R27 , HIGH ( _0x19 + ( 6 ) )
                 	__POINTW2MN _0x19,6
000426 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0094         }
                 ; 0000 0095 
                 ; 0000 0096         if(strcmp(argv[1], "on") == 0)
                 _0x18:
000428 940e 08da 	CALL SUBOPT_0x8
                +
00042a e4a0     +LDI R26 , LOW ( _0x19 + ( 57 ) )
00042b e0b6     +LDI R27 , HIGH ( _0x19 + ( 57 ) )
                 	__POINTW2MN _0x19,57
00042c 940e 07bf 	CALL _strcmp
00042e 30e0      	CPI  R30,0
00042f f5b1      	BRNE _0x1A
                 ; 0000 0097         {
                 ; 0000 0098             value = atoi(argv[2]);
000430 940e 08e1 	CALL SUBOPT_0x9
000432 940e 08e6 	CALL SUBOPT_0xA
                 ; 0000 0099             if(value > 0 && value < 9)
000434 f424      	BRGE _0x1C
                +
000435 3009     +CPI R16 , LOW ( 9 )
000436 e0e0     +LDI R30 , HIGH ( 9 )
000437 071e     +CPC R17 , R30
                 	__CPWRN 16,17,9
000438 f00c      	BRLT _0x1D
                 _0x1C:
000439 c00f      	RJMP _0x1B
                 _0x1D:
                 ; 0000 009A             {
                 ; 0000 009B                 LedOn(value-1);
00043a 2fa0      	MOV  R26,R16
00043b 50a1      	SUBI R26,LOW(1)
00043c d125      	RCALL _LedOn
                 ; 0000 009C                 cli.println("echo: Turn on led ");
                +
00043d e4a3     +LDI R26 , LOW ( _0x19 + ( 60 ) )
00043e e0b6     +LDI R27 , HIGH ( _0x19 + ( 60 ) )
                 	__POINTW2MN _0x19,60
00043f 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 009D                 user_uart_println(argv[2]);
000441 940e 08e1 	CALL SUBOPT_0x9
000443 940e 08ed 	CALL SUBOPT_0xB
                 ; 0000 009E                 strcpy(string,"Turn on led ");
                +
000445 e5a6     +LDI R26 , LOW ( _0x19 + ( 79 ) )
000446 e0b6     +LDI R27 , HIGH ( _0x19 + ( 79 ) )
                 	__POINTW2MN _0x19,79
000447 940e 08f4 	CALL SUBOPT_0xC
                 ; 0000 009F                 strcat(string, argv[2]);
                 ; 0000 00A0                 DisplayLCDLine1(string);
                 ; 0000 00A1             }
                 ; 0000 00A2 
                 ; 0000 00A3             if(strcmp(argv[2], "all") == 0)
                 _0x1B:
000449 940e 08e1 	CALL SUBOPT_0x9
00044b 93ba      	ST   -Y,R27
00044c 93aa      	ST   -Y,R26
                +
00044d e6a3     +LDI R26 , LOW ( _0x19 + ( 92 ) )
00044e e0b6     +LDI R27 , HIGH ( _0x19 + ( 92 ) )
                 	__POINTW2MN _0x19,92
00044f 940e 07bf 	CALL _strcmp
000451 30e0      	CPI  R30,0
000452 f499      	BRNE _0x1E
                 ; 0000 00A4             {
                 ; 0000 00A5                 for(value = 0; value < 8; value++)
                +
000453 e000     +LDI R16 , LOW ( 0 )
000454 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20:
                +
000455 3008     +CPI R16 , LOW ( 8 )
000456 e0e0     +LDI R30 , HIGH ( 8 )
000457 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000458 f42c      	BRGE _0x21
                 ; 0000 00A6                 {
                 ; 0000 00A7                     LedOn(value);
000459 2fa0      	MOV  R26,R16
00045a d107      	RCALL _LedOn
                 ; 0000 00A8                 }
                +
00045b 5f0f     +SUBI R16 , LOW ( - 1 )
00045c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00045d cff7      	RJMP _0x20
                 _0x21:
                 ; 0000 00A9                 cli.println("echo: All led was on");
                +
00045e e6a7     +LDI R26 , LOW ( _0x19 + ( 96 ) )
00045f e0b6     +LDI R27 , HIGH ( _0x19 + ( 96 ) )
                 	__POINTW2MN _0x19,96
000460 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 00AA                 DisplayLCDLine1("Turn on all led");
                +
000462 e7ac     +LDI R26 , LOW ( _0x19 + ( 117 ) )
000463 e0b6     +LDI R27 , HIGH ( _0x19 + ( 117 ) )
                 	__POINTW2MN _0x19,117
000464 940e 05e9 	CALL _DisplayLCDLine1
                 ; 0000 00AB             }
                 ; 0000 00AC 
                 ; 0000 00AD         }
                 _0x1E:
                 ; 0000 00AE 
                 ; 0000 00AF         if(strcmp(argv[1], "off") == 0)
                 _0x1A:
000466 940e 08da 	CALL SUBOPT_0x8
                +
000468 e8ac     +LDI R26 , LOW ( _0x19 + ( 133 ) )
000469 e0b6     +LDI R27 , HIGH ( _0x19 + ( 133 ) )
                 	__POINTW2MN _0x19,133
00046a 940e 07bf 	CALL _strcmp
00046c 30e0      	CPI  R30,0
00046d f5b1      	BRNE _0x22
                 ; 0000 00B0         {
                 ; 0000 00B1             value = atoi(argv[2]);
00046e 940e 08e1 	CALL SUBOPT_0x9
000470 940e 08e6 	CALL SUBOPT_0xA
                 ; 0000 00B2             if(value > 0 && value < 9)
000472 f424      	BRGE _0x24
                +
000473 3009     +CPI R16 , LOW ( 9 )
000474 e0e0     +LDI R30 , HIGH ( 9 )
000475 071e     +CPC R17 , R30
                 	__CPWRN 16,17,9
000476 f00c      	BRLT _0x25
                 _0x24:
000477 c00f      	RJMP _0x23
                 _0x25:
                 ; 0000 00B3             {
                 ; 0000 00B4                 LedOff(value-1);
000478 2fa0      	MOV  R26,R16
000479 50a1      	SUBI R26,LOW(1)
00047a d0f3      	RCALL _LedOff
                 ; 0000 00B5                 cli.println("echo: Turn off led ");
                +
00047b e9a0     +LDI R26 , LOW ( _0x19 + ( 137 ) )
00047c e0b6     +LDI R27 , HIGH ( _0x19 + ( 137 ) )
                 	__POINTW2MN _0x19,137
00047d 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 00B6                 user_uart_println(argv[2]);
00047f 940e 08e1 	CALL SUBOPT_0x9
000481 940e 08ed 	CALL SUBOPT_0xB
                 ; 0000 00B7                 strcpy(string,"Turn off led ");
                +
000483 eaa4     +LDI R26 , LOW ( _0x19 + ( 157 ) )
000484 e0b6     +LDI R27 , HIGH ( _0x19 + ( 157 ) )
                 	__POINTW2MN _0x19,157
000485 940e 08f4 	CALL SUBOPT_0xC
                 ; 0000 00B8                 strcat(string, argv[2]);
                 ; 0000 00B9                 DisplayLCDLine1(string);
                 ; 0000 00BA             }
                 ; 0000 00BB 
                 ; 0000 00BC             if(strcmp(argv[2], "all") == 0)
                 _0x23:
000487 940e 08e1 	CALL SUBOPT_0x9
000489 93ba      	ST   -Y,R27
00048a 93aa      	ST   -Y,R26
                +
00048b eba2     +LDI R26 , LOW ( _0x19 + ( 171 ) )
00048c e0b6     +LDI R27 , HIGH ( _0x19 + ( 171 ) )
                 	__POINTW2MN _0x19,171
00048d 940e 07bf 	CALL _strcmp
00048f 30e0      	CPI  R30,0
000490 f499      	BRNE _0x26
                 ; 0000 00BD             {
                 ; 0000 00BE                 for(value = 0; value < 8; value++)
                +
000491 e000     +LDI R16 , LOW ( 0 )
000492 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x28:
                +
000493 3008     +CPI R16 , LOW ( 8 )
000494 e0e0     +LDI R30 , HIGH ( 8 )
000495 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000496 f42c      	BRGE _0x29
                 ; 0000 00BF                 {
                 ; 0000 00C0                     LedOff(value);
000497 2fa0      	MOV  R26,R16
000498 d0d5      	RCALL _LedOff
                 ; 0000 00C1                 }
                +
000499 5f0f     +SUBI R16 , LOW ( - 1 )
00049a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00049b cff7      	RJMP _0x28
                 _0x29:
                 ; 0000 00C2                 cli.println("echo: All led was off");
                +
00049c eba6     +LDI R26 , LOW ( _0x19 + ( 175 ) )
00049d e0b6     +LDI R27 , HIGH ( _0x19 + ( 175 ) )
                 	__POINTW2MN _0x19,175
00049e 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 00C3                 DisplayLCDLine1("Turn off all led");
                +
0004a0 ecac     +LDI R26 , LOW ( _0x19 + ( 197 ) )
0004a1 e0b6     +LDI R27 , HIGH ( _0x19 + ( 197 ) )
                 	__POINTW2MN _0x19,197
0004a2 940e 05e9 	CALL _DisplayLCDLine1
                 ; 0000 00C4             }
                 ; 0000 00C5         }
                 _0x26:
                 ; 0000 00C6 
                 ; 0000 00C7 
                 ; 0000 00C8     }
                 _0x22:
                 ; 0000 00C9     if(argc == 0)
                 _0x17:
0004a4 89ed      	LDD  R30,Y+21
0004a5 89fe      	LDD  R31,Y+21+1
0004a6 9730      	SBIW R30,0
0004a7 f421      	BRNE _0x2A
                 ; 0000 00CA     {
                 ; 0000 00CB         cli.println("Led function executed");
                +
0004a8 edad     +LDI R26 , LOW ( _0x19 + ( 214 ) )
0004a9 e0b6     +LDI R27 , HIGH ( _0x19 + ( 214 ) )
                 	__POINTW2MN _0x19,214
0004aa 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 00CC     }
                 ; 0000 00CD     return CLI_OK;
                 _0x2A:
0004ac e0e0      	LDI  R30,LOW(0)
0004ad 8119      	LDD  R17,Y+1
0004ae 8108      	LDD  R16,Y+0
0004af 9667      	ADIW R28,23
0004b0 9508      	RET
                 ; 0000 00CE }
                 
                 	.DSEG
                 _0x19:
000607           	.BYTE 0xEC
                 ;
                 ;
                 ;
                 ;cli_status_t lcd_func(int argc, char **argv)
                 ; 0000 00D3 {
                 
                 	.CSEG
                 _lcd_func:
                 ; 0000 00D4     int i,value, cnt=0;
                 ; 0000 00D5     char string1[17] ={0};
                 ; 0000 00D6     char string2[17] ={0};
                 ; 0000 00D7     if(argc > 0)
0004b1 93ba      	ST   -Y,R27
0004b2 93aa      	ST   -Y,R26
0004b3 97a2      	SBIW R28,34
0004b4 e282      	LDI  R24,34
0004b5 e0a0      	LDI  R26,LOW(0)
0004b6 e0b0      	LDI  R27,HIGH(0)
0004b7 e8e6      	LDI  R30,LOW(_0x2B*2)
0004b8 e0f1      	LDI  R31,HIGH(_0x2B*2)
0004b9 940e 09b6 	CALL __INITLOCB
0004bb 940e 09a8 	CALL __SAVELOCR6
                 ;	argc -> Y+42
                 ;	*argv -> Y+40
                 ;	i -> R16,R17
                 ;	value -> R18,R19
                 ;	cnt -> R20,R21
                 ;	string1 -> Y+23
                 ;	string2 -> Y+6
                +
0004bd e040     +LDI R20 , LOW ( 0 )
0004be e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0004bf a5aa      	LDD  R26,Y+42
0004c0 a5bb      	LDD  R27,Y+42+1
0004c1 940e 09a4 	CALL __CPW02
0004c3 f014      	BRLT PC+3
0004c4 940c 0526 	JMP _0x2C
                 ; 0000 00D8     {
                 ; 0000 00D9         if(strcmp(argv[1], "-help") == 0)
0004c6 940e 0904 	CALL SUBOPT_0xD
                +
0004c8 efa3     +LDI R26 , LOW ( _0x2E + ( 0 ) )
0004c9 e0b6     +LDI R27 , HIGH ( _0x2E + ( 0 ) )
                 	__POINTW2MN _0x2E,0
0004ca 940e 07bf 	CALL _strcmp
0004cc 30e0      	CPI  R30,0
0004cd f421      	BRNE _0x2D
                 ; 0000 00DA         {
                 ; 0000 00DB             cli.println("echo: Lcd help menu: \r<lcd> <disp> <text>");
                +
0004ce efa9     +LDI R26 , LOW ( _0x2E + ( 6 ) )
0004cf e0b6     +LDI R27 , HIGH ( _0x2E + ( 6 ) )
                 	__POINTW2MN _0x2E,6
0004d0 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 00DC         }
                 ; 0000 00DD 
                 ; 0000 00DE         if(strcmp(argv[1], "disp") == 0)
                 _0x2D:
0004d2 940e 0904 	CALL SUBOPT_0xD
                +
0004d4 e2a3     +LDI R26 , LOW ( _0x2E + ( 48 ) )
0004d5 e0b7     +LDI R27 , HIGH ( _0x2E + ( 48 ) )
                 	__POINTW2MN _0x2E,48
0004d6 940e 07bf 	CALL _strcmp
0004d8 30e0      	CPI  R30,0
0004d9 f011      	BREQ PC+3
0004da 940c 0525 	JMP _0x2F
                 ; 0000 00DF         {
                 ; 0000 00E0             value = 0;
                +
0004dc e020     +LDI R18 , LOW ( 0 )
0004dd e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 00E1             for(i=2; i< argc; i++)
                +
0004de e002     +LDI R16 , LOW ( 2 )
0004df e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                 _0x31:
0004e0 a5ea      	LDD  R30,Y+42
0004e1 a5fb      	LDD  R31,Y+42+1
0004e2 170e      	CP   R16,R30
0004e3 071f      	CPC  R17,R31
0004e4 f584      	BRGE _0x32
                 ; 0000 00E2             {
                 ; 0000 00E3              value += strlen(argv[i]);
0004e5 940e 090b 	CALL SUBOPT_0xE
0004e7 01df      	MOVW R26,R30
0004e8 940e 07e0 	CALL _strlen
                +
0004ea 0f2e     +ADD R18 , R30
0004eb 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
                 ; 0000 00E4              if(value < 17)
                +
0004ec 3121     +CPI R18 , LOW ( 17 )
0004ed e0e0     +LDI R30 , HIGH ( 17 )
0004ee 073e     +CPC R19 , R30
                 	__CPWRN 18,19,17
0004ef f46c      	BRGE _0x33
                 ; 0000 00E5              {
                 ; 0000 00E6 
                 ; 0000 00E7                 string1[cnt] = argv[i][cnt];
0004f0 01fa      	MOVW R30,R20
0004f1 01de      	MOVW R26,R28
0004f2 9657      	ADIW R26,23
0004f3 0fea      	ADD  R30,R26
0004f4 1ffb      	ADC  R31,R27
0004f5 010f      	MOVW R0,R30
0004f6 940e 090b 	CALL SUBOPT_0xE
0004f8 0fe4      	ADD  R30,R20
0004f9 1ff5      	ADC  R31,R21
0004fa 81e0      	LD   R30,Z
0004fb 01d0      	MOVW R26,R0
0004fc 93ec      	ST   X,R30
                 ; 0000 00E8              }
                 ; 0000 00E9              if(value >16 && value < 23)
                 _0x33:
                +
0004fd 3121     +CPI R18 , LOW ( 17 )
0004fe e0e0     +LDI R30 , HIGH ( 17 )
0004ff 073e     +CPC R19 , R30
                 	__CPWRN 18,19,17
000500 f024      	BRLT _0x35
                +
000501 3127     +CPI R18 , LOW ( 23 )
000502 e0e0     +LDI R30 , HIGH ( 23 )
000503 073e     +CPC R19 , R30
                 	__CPWRN 18,19,23
000504 f00c      	BRLT _0x36
                 _0x35:
000505 c00c      	RJMP _0x34
                 _0x36:
                 ; 0000 00EA              {
                 ; 0000 00EB                 strcat(string2,argv[i]);
000506 01fe      	MOVW R30,R28
000507 9636      	ADIW R30,6
000508 93fa      	ST   -Y,R31
000509 93ea      	ST   -Y,R30
00050a 01f8      	MOVW R30,R16
00050b a5aa      	LDD  R26,Y+42
00050c a5bb      	LDD  R27,Y+42+1
00050d 940e 0915 	CALL SUBOPT_0xF
00050f 01df      	MOVW R26,R30
000510 940e 07ae 	CALL _strcat
                 ; 0000 00EC              }
                 ; 0000 00ED             }
                 _0x34:
                +
000512 5f0f     +SUBI R16 , LOW ( - 1 )
000513 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000514 cfcb      	RJMP _0x31
                 _0x32:
                 ; 0000 00EE 
                 ; 0000 00EF             DisplayLCDLine1(string1);
000515 01de      	MOVW R26,R28
000516 9657      	ADIW R26,23
000517 940e 05e9 	CALL _DisplayLCDLine1
                 ; 0000 00F0 
                 ; 0000 00F1             if(value > 16)
                +
000519 3121     +CPI R18 , LOW ( 17 )
00051a e0e0     +LDI R30 , HIGH ( 17 )
00051b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,17
00051c f024      	BRLT _0x37
                 ; 0000 00F2             {
                 ; 0000 00F3                 DisplayLCDLine2(string2);
00051d 01de      	MOVW R26,R28
00051e 9616      	ADIW R26,6
00051f 940e 060e 	CALL _DisplayLCDLine2
                 ; 0000 00F4             }
                 ; 0000 00F5 
                 ; 0000 00F6             cli.println("echo: Display on LCD");
                 _0x37:
                +
000521 e2a8     +LDI R26 , LOW ( _0x2E + ( 53 ) )
000522 e0b7     +LDI R27 , HIGH ( _0x2E + ( 53 ) )
                 	__POINTW2MN _0x2E,53
000523 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 00F7         }
                 ; 0000 00F8     return CLI_OK;
                 _0x2F:
000525 e0e0      	LDI  R30,LOW(0)
                 ; 0000 00F9     }
                 ; 0000 00FA }
                 _0x2C:
                 _0x20A000D:
000526 940e 09af 	CALL __LOADLOCR6
000528 96ac      	ADIW R28,44
000529 9508      	RET
                 
                 	.DSEG
                 _0x2E:
0006f3           	.BYTE 0x4A
                 ;
                 ;
                 ;cli_status_t led7_func(int argc, char **argv)
                 ; 0000 00FE {
                 
                 	.CSEG
                 _led7_func:
                 ; 0000 00FF     int value;
                 ; 0000 0100     if(argc > 0)
00052a 940e 08c5 	CALL SUBOPT_0x5
                 ;	argc -> Y+4
                 ;	*argv -> Y+2
                 ;	value -> R16,R17
00052c f554      	BRGE _0x38
                 ; 0000 0101     {
                 ; 0000 0102         if(strcmp(argv[1], "-help") == 0)
00052d 940e 08ce 	CALL SUBOPT_0x6
                +
00052f e3ad     +LDI R26 , LOW ( _0x3A + ( 0 ) )
000530 e0b7     +LDI R27 , HIGH ( _0x3A + ( 0 ) )
                 	__POINTW2MN _0x3A,0
000531 940e 07bf 	CALL _strcmp
000533 30e0      	CPI  R30,0
000534 f421      	BRNE _0x39
                 ; 0000 0103         {
                 ; 0000 0104             cli.println("LED7 help menu: \r<led7> <disp> <value(1->8)>");
                +
000535 e4a3     +LDI R26 , LOW ( _0x3A + ( 6 ) )
000536 e0b7     +LDI R27 , HIGH ( _0x3A + ( 6 ) )
                 	__POINTW2MN _0x3A,6
000537 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0105         }
                 ; 0000 0106 
                 ; 0000 0107         if(strcmp(argv[1], "disp") == 0)
                 _0x39:
000539 940e 08ce 	CALL SUBOPT_0x6
                +
00053b e7a0     +LDI R26 , LOW ( _0x3A + ( 51 ) )
00053c e0b7     +LDI R27 , HIGH ( _0x3A + ( 51 ) )
                 	__POINTW2MN _0x3A,51
00053d 940e 07bf 	CALL _strcmp
00053f 30e0      	CPI  R30,0
000540 f4b1      	BRNE _0x3B
                 ; 0000 0108         {
                 ; 0000 0109             value = atoi(argv[2]);
000541 940e 08d5 	CALL SUBOPT_0x7
000543 940e 0860 	CALL _atoi
000545 018f      	MOVW R16,R30
                 ; 0000 010A             if(value >= 0 && value < 10)
000546 2311      	TST  R17
000547 f022      	BRMI _0x3D
                +
000548 300a     +CPI R16 , LOW ( 10 )
000549 e0e0     +LDI R30 , HIGH ( 10 )
00054a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00054b f00c      	BRLT _0x3E
                 _0x3D:
00054c c00a      	RJMP _0x3C
                 _0x3E:
                 ; 0000 010B             {
                 ; 0000 010C                 Led7Disp1(value);
00054d 01d8      	MOVW R26,R16
00054e 940e 07a0 	CALL _Led7Disp1
                 ; 0000 010D                 cli.println("echo: display ");
                +
000550 e7a5     +LDI R26 , LOW ( _0x3A + ( 56 ) )
000551 e0b7     +LDI R27 , HIGH ( _0x3A + ( 56 ) )
                 	__POINTW2MN _0x3A,56
000552 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 010E                 user_uart_println(argv[2]);
000554 940e 08d5 	CALL SUBOPT_0x7
000556 de3e      	RCALL _user_uart_println
                 ; 0000 010F             }
                 ; 0000 0110 
                 ; 0000 0111         }
                 _0x3C:
                 ; 0000 0112 
                 ; 0000 0113     }
                 _0x3B:
                 ; 0000 0114     if(argc == 0)
                 _0x38:
000557 81ec      	LDD  R30,Y+4
000558 81fd      	LDD  R31,Y+4+1
000559 9730      	SBIW R30,0
00055a f421      	BRNE _0x3F
                 ; 0000 0115     {
                 ; 0000 0116         cli.println("Led7 function executed");
                +
00055b e8a4     +LDI R26 , LOW ( _0x3A + ( 71 ) )
00055c e0b7     +LDI R27 , HIGH ( _0x3A + ( 71 ) )
                 	__POINTW2MN _0x3A,71
00055d 940e 08bf 	CALL SUBOPT_0x4
                 ; 0000 0117     }
                 ; 0000 0118     return CLI_OK;
                 _0x3F:
00055f e0e0      	LDI  R30,LOW(0)
000560 940c 085c 	JMP  _0x20A0001
                 ; 0000 0119 }
                 
                 	.DSEG
                 _0x3A:
00073d           	.BYTE 0x5E
                 ;/*****************************************************************************
                 ; *   @file
                 ; *   @brief  Source file of
                 ; *   @author Kyle
                 ; *   @version 1.0.0
                 ; *   @note :    1.
                 ; *              2.
                 ; *              3.
                 ;********************************************************************************/
                 ;
                 ;
                 ;/******************************************************************************/
                 ;/***************************** Include Files **********************************/
                 ;/******************************************************************************/
                 ;#include "sw.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;/******************************************************************************/
                 ;/************************* Global variable declaration ************************/
                 ;/******************************************************************************/
                 ;extern unsigned int LedCtrl;
                 ;unsigned int LedCtrl = 0;
                 ;
                 ;/******************************************************************************/
                 ;/************************** Functions Implementation **************************/
                 ;/******************************************************************************/
                 ;void LedTurn()
                 ; 0001 001B {
                 
                 	.CSEG
                 ; 0001 001C     static unsigned char SW=0;
                 ; 0001 001D     SW=PINB;
                 ; 0001 001E 
                 ; 0001 001F     switch(SW)
                 ; 0001 0020     {
                 ; 0001 0021         case 0xfe:LED_CON=0x01;break;
                 ; 0001 0022         case 0xfd:LED_CON=0x02;break;
                 ; 0001 0023         case 0xfb:LED_CON=0x04;break;
                 ; 0001 0024         case 0xf7:LED_CON=0X08;break;
                 ; 0001 0025         case 0xef:LED_CON=0X10;break;
                 ; 0001 0026         case 0xdf:LED_CON=0X20;break;
                 ; 0001 0027         case 0xbf:LED_CON=0X40;break;
                 ; 0001 0028         case 0x7f:LED_CON=0X80;break;
                 ; 0001 0029         default:LED_CON=0X00;break;
                 ; 0001 002A     }
                 ; 0001 002B }
                 ;
                 ;
                 ;void LedOn(enum LedEnum led)
                 ; 0001 002F {
                 _LedOn:
                 ; 0001 0030 LedCtrl |= (0x01 << led);
000562 940e 091c 	CALL SUBOPT_0x10
                 ;	led -> Y+0
000564 91a0 07e4 	LDS  R26,_LedCtrl
000566 91b0 07e5 	LDS  R27,_LedCtrl+1
000568 2bea      	OR   R30,R26
000569 2bfb      	OR   R31,R27
00056a 940e 0923 	CALL SUBOPT_0x11
                 ; 0001 0031 LED_CON  = LedCtrl;
                 ; 0001 0032 }
00056c 940c 0677 	JMP  _0x20A000A
                 ;
                 ;void LedOff(enum LedEnum led)
                 ; 0001 0035 {
                 _LedOff:
                 ; 0001 0036 LedCtrl &= ~(0x01 << led);
00056e 940e 091c 	CALL SUBOPT_0x10
                 ;	led -> Y+0
000570 95e0      	COM  R30
000571 95f0      	COM  R31
000572 91a0 07e4 	LDS  R26,_LedCtrl
000574 91b0 07e5 	LDS  R27,_LedCtrl+1
000576 23ea      	AND  R30,R26
000577 23fb      	AND  R31,R27
000578 940e 0923 	CALL SUBOPT_0x11
                 ; 0001 0037 LED_CON  = LedCtrl;
                 ; 0001 0038 }
00057a 940c 0677 	JMP  _0x20A000A
                 ;
                 ;void LedInit()
                 ; 0001 003B {
                 _LedInit:
                 ; 0001 003C     DDRB=0x00;  //PORTB INPUTPORT Set
00057c e0e0      	LDI  R30,LOW(0)
00057d bbe7      	OUT  0x17,R30
                 ; 0001 003D     MCUCR=0X80; //enable External memory and I/O control
00057e 940c 079d 	JMP  _0x20A0006
                 ; 0001 003E 
                 ; 0001 003F }
                 ;/*****************************************************************************
                 ; *   @file
                 ; *   @brief  Source file of
                 ; *   @author Kyle
                 ; *   @version 1.0.0
                 ; *   @note :    1.
                 ; *              2.
                 ; *              3.
                 ;********************************************************************************/
                 ;
                 ;
                 ;/******************************************************************************/
                 ;/***************************** Include Files **********************************/
                 ;/******************************************************************************/
                 ;#include "uart.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;/******************************************************************************/
                 ;/************************* Global variable declaration ************************/
                 ;/******************************************************************************/
                 ;extern char rx_buffer0[RX_BUFFER_SIZE0];
                 ;extern unsigned int rx_wr_index0,rx_counter0;
                 ;extern bit rx_buffer_overflow0, cmd_enter; // This flag is set on USART0 Receiver buffer overflow
                 ;extern cli_t cli;
                 ;
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;unsigned int rx_wr_index0,rx_counter0;
                 ;bit rx_buffer_overflow0, cmd_enter;
                 ;
                 ;
                 ;/******************************************************************************/
                 ;/************************** Functions Implementation **************************/
                 ;/******************************************************************************/
                 ;void UartSend( unsigned int data )
                 ; 0002 0022 {
                 
                 	.CSEG
                 _UartSend:
                 ; 0002 0023 /* Wait for empty transmit buffer */
                 ; 0002 0024 while ( !( UCSR0A & (1<<UDRE)) );
000580 93ba      	ST   -Y,R27
000581 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x40003:
000582 9b5d      	SBIS 0xB,5
000583 cffe      	RJMP _0x40003
                 ; 0002 0025 /* Copy 9th bit to TXB8 */
                 ; 0002 0026 UCSR0B &= ~(1<<TXB8);
000584 9850      	CBI  0xA,0
                 ; 0002 0027 if ( data & 0x0100 )
000585 81e9      	LDD  R30,Y+1
000586 70e1      	ANDI R30,LOW(0x1)
000587 f009      	BREQ _0x40006
                 ; 0002 0028 UCSR0B |= (1<<TXB8);
000588 9a50      	SBI  0xA,0
                 ; 0002 0029 /* Put data into buffer, sends the data */
                 ; 0002 002A UDR0 = data;
                 _0x40006:
000589 81e8      	LD   R30,Y
00058a b9ec      	OUT  0xC,R30
                 ; 0002 002B }
00058b 940c 07ac 	JMP  _0x20A0005
                 ;
                 ;
                 ;
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)// USART0 Receiver interrupt service routine
                 ; 0002 0030 {
                 _usart0_rx_isr:
00058d 940e 092c 	CALL SUBOPT_0x12
                 ; 0002 0031 char status,data;
                 ; 0002 0032 status=UCSR0A;
00058f 931a      	ST   -Y,R17
000590 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000591 b11b      	IN   R17,11
                 ; 0002 0033 data=UDR0;
000592 b10c      	IN   R16,12
                 ; 0002 0034 UartSend(data);
000593 2fa0      	MOV  R26,R16
000594 27bb      	CLR  R27
000595 dfea      	RCALL _UartSend
                 ; 0002 0035 //cli_put(&cli, data);
                 ; 0002 0036 
                 ; 0002 0037 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000596 2fe1      	MOV  R30,R17
000597 71ec      	ANDI R30,LOW(0x1C)
000598 f439      	BRNE _0x40007
                 ; 0002 0038    {
                 ; 0002 0039         cli_put(&cli, data);
000599 ece6      	LDI  R30,LOW(_cli)
00059a e0f7      	LDI  R31,HIGH(_cli)
00059b 93fa      	ST   -Y,R31
00059c 93ea      	ST   -Y,R30
00059d 2fa0      	MOV  R26,R16
00059e 940e 073a 	CALL _cli_put
                 ; 0002 003A    }
                 ; 0002 003B 
                 ; 0002 003C }
                 _0x40007:
0005a0 9109      	LD   R16,Y+
0005a1 9119      	LD   R17,Y+
0005a2 940e 093a 	CALL SUBOPT_0x13
0005a4 9518      	RETI
                 ;
                 ;void Uart0Init()
                 ; 0002 003F {
                 _Uart0Init:
                 ; 0002 0040     // USART0 initialization
                 ; 0002 0041     UCSR0A=0x00; // Communication Parameters: 8 Data, 1 Stop, No Parity
0005a5 e0e0      	LDI  R30,LOW(0)
0005a6 b9eb      	OUT  0xB,R30
                 ; 0002 0042     UCSR0B=0x98; // USART0 Receiver: On
0005a7 e9e8      	LDI  R30,LOW(152)
0005a8 b9ea      	OUT  0xA,R30
                 ; 0002 0043     UCSR0C=0x06; // USART0 Transmitter: On
0005a9 e0e6      	LDI  R30,LOW(6)
0005aa 93e0 0095 	STS  149,R30
                 ; 0002 0044     UBRR0H=0x00; // USART0 Mode: Asynchronous
0005ac e0e0      	LDI  R30,LOW(0)
0005ad 93e0 0090 	STS  144,R30
                 ; 0002 0045     UBRR0L=0x67;  // USART0 Baud Rate: 9600
0005af e6e7      	LDI  R30,LOW(103)
0005b0 b9e9      	OUT  0x9,R30
                 ; 0002 0046 }
0005b1 9508      	RET
                 ;
                 ;void UartTest()
                 ; 0002 0049 {
                 ; 0002 004A    int i=0;
                 ; 0002 004B    if(rx_buffer_overflow0)
                 ;	i -> R16,R17
                 ; 0002 004C    {
                 ; 0002 004D         for(i=0;i<8;i++)
                 ; 0002 004E         {
                 ; 0002 004F             UartSend(rx_buffer0[i]);
                 ; 0002 0050         }
                 ; 0002 0051 
                 ; 0002 0052         rx_buffer_overflow0=0;
                 ; 0002 0053         UartSend( '\n' );
                 ; 0002 0054     }
                 ; 0002 0055 }
                 ;
                 ;
                 ;
                 ;/*****************************************************************************
                 ; *   @file
                 ; *   @brief  Source file of
                 ; *   @author Kyle
                 ; *   @version 1.0.0
                 ; *   @note :    1.
                 ; *              2.
                 ; *              3.
                 ;********************************************************************************/
                 ;
                 ;
                 ;/******************************************************************************/
                 ;/***************************** Include Files **********************************/
                 ;/******************************************************************************/
                 ;#include "dotmat.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;/******************************************************************************/
                 ;/************************* Global variable declaration ************************/
                 ;/******************************************************************************/
                 ;//------------DOT MATRIX-----------------------------
                 ;const unsigned char vertical[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
                 
                 	.DSEG
                 ;const unsigned char english[28][8]={
                 ;0xe7,0xdb,0xbd,0xbd,0x81,0xbd,0xbd,0xbd,     // A
                 ;0xc1,0xbd,0xbd,0xc1,0xdd,0xbd,0xbd,0xc1,     // B
                 ;0xc3,0xbd,0xfd,0xfd,0xfd,0xbd,0xbd,0xc3,     // C
                 ;0xc1,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xc1,     // D
                 ;0x81,0xfd,0xfd,0x81,0xfd,0xfd,0xfd,0x81,     // E
                 ;0x81,0xfd,0xfd,0x81,0xfd,0xfd,0xfd,0xfd,     // F
                 ;0xe7,0xd9,0xbd,0xfd,0x8d,0xbd,0xdb,0xe7,     // G
                 ;0xbd,0xbd,0xbd,0x81,0xbd,0xbd,0xbd,0xbd,     // H
                 ;0xc3,0xe7,0xe7,0xe7,0xe7,0xe7,0xe7,0xc3,     // I
                 ;0xc3,0xe7,0xe7,0xe7,0xe7,0xe5,0xf5,0xfb,     // J
                 ;0xdd,0xed,0xf5,0xf9,0xf5,0xed,0xdd,0xbd,     // K
                 ;0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0x81,     // L
                 ;0xbd,0x99,0xa5,0xa5,0xa5,0xbd,0xbd,0xbd,     // M
                 ;0xbd,0xbd,0xb9,0xb5,0xad,0x9d,0xbd,0xbd,     // N
                 ;0xe7,0xdb,0xbd,0xbd,0xbd,0xbd,0xdb,0xe7,     // O
                 ;0xe1,0xdd,0xdd,0xdd,0xe1,0xfd,0xfd,0xfd,     // P
                 ;0xe3,0xdd,0xdd,0xdd,0xd5,0xcd,0xc3,0xbf,     // Q
                 ;0xc1,0xbd,0xbd,0xc1,0xdd,0xbd,0xbd,0xbd,     // R
                 ;0xc3,0xbd,0xfd,0xc3,0xbf,0xbf,0xbd,0xc3,     // S
                 ;0x81,0xe7,0xe7,0xe7,0xe7,0xe7,0xe7,0xe7,     // T
                 ;0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xc3,     // U
                 ;0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xdb,0xe7,     // V
                 ;0xbd,0xbd,0xbd,0xbd,0xa5,0xa5,0xa5,0x99,     // W
                 ;0xbd,0xbd,0xd9,0xe7,0xe7,0xdb,0xbd,0xbd,     // X
                 ;0xbd,0xbd,0xbd,0xdb,0xe7,0xe7,0xe7,0xe7,     // Y
                 ;0x81,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0x81,     // Z
                 ;};
                 ;
                 ;static volatile int Toggle=0;
                 ;static volatile int num_cnt=0;
                 ;extern char DispChar;
                 ;char DispChar;
                 ;
                 ;
                 ;/******************************************************************************/
                 ;/************************** Functions Implementation **************************/
                 ;/******************************************************************************/
                 ;
                 ;
                 ;void Dotmatrix_Timer()
                 ; 0003 003F {
                 
                 	.CSEG
                 ; 0003 0040 
                 ; 0003 0041 	static unsigned int cnt=0;
                 ; 0003 0042 	cnt++;
                 ; 0003 0043 	if(cnt>1000) //1? ??
                 ; 0003 0044 	{
                 ; 0003 0045 	num_cnt++;
                 ; 0003 0046 	cnt=0;
                 ; 0003 0047 		if(num_cnt==27)
                 ; 0003 0048 		{
                 ; 0003 0049 			Toggle++;
                 ; 0003 004A 			num_cnt=0;
                 ; 0003 004B 			if(Toggle==2)
                 ; 0003 004C 			{
                 ; 0003 004D 				Toggle=0;
                 ; 0003 004E 			}
                 ; 0003 004F 		}
                 ; 0003 0050   	}
                 ; 0003 0051 }
                 ;void DotmatrixTest()
                 ; 0003 0053 {
                 ; 0003 0054 
                 ; 0003 0055 	int i=0;
                 ; 0003 0056     for(i=0;i<8;i++)
                 ;	i -> R16,R17
                 ; 0003 0057     {
                 ; 0003 0058         switch(Toggle)
                 ; 0003 0059         {
                 ; 0003 005A             case 0:
                 ; 0003 005B             DOT_YELLOW=~english[num_cnt][i]; //Orange LED ?? ??(Horizontal)
                 ; 0003 005C             DOT_RED=~0XFF;                   //Red LED ?? ??(Horizontal)
                 ; 0003 005D             LCD_DATABUS=vertical[i];         // ?? ??(Vertical)
                 ; 0003 005E             delay_ms(1); 				     //1ms?? ???? ?????
                 ; 0003 005F             break;
                 ; 0003 0060             case 1:
                 ; 0003 0061             DOT_YELLOW=~0xff;     //Orange LED ?? ??(Horizontal)
                 ; 0003 0062             DOT_RED=~english[num_cnt][i];//Red LED ?? ??(Horizontal)
                 ; 0003 0063             LCD_DATABUS=vertical[i];
                 ; 0003 0064             delay_ms(1);             //1ms?? ???? ?????
                 ; 0003 0065             break;
                 ; 0003 0066         }
                 ; 0003 0067 	}
                 ; 0003 0068 }
                 ;
                 ;
                 ;void DotMatInit(void)
                 ; 0003 006C {
                 _DotMatInit:
                 ; 0003 006D     DDRB=0x00;  //PORTB INPUTPORT Set
0005b2 e0e0      	LDI  R30,LOW(0)
0005b3 bbe7      	OUT  0x17,R30
                 ; 0003 006E     MCUCR=0X80; //enable External memory and I/O control
0005b4 940c 079d 	JMP  _0x20A0006
                 ; 0003 006F 
                 ; 0003 0070 //    TCCR0=0x04; //Prescaler 64 ??
                 ; 0003 0071 //    TCNT0=0X06; //??? ???? ??
                 ; 0003 0072 //    TIMSK=0X01; //TIMER 0 ?????? ??
                 ; 0003 0073 }
                 ;
                 ;
                 ;void DotMatDisp(char c)
                 ; 0003 0077 {
                 ; 0003 0078 	int i=0;
                 ; 0003 0079     int num_value = 0;
                 ; 0003 007A     DDRB=0x00;  //PORTB INPUTPORT Set
                 ;	c -> Y+4
                 ;	i -> R16,R17
                 ;	num_value -> R18,R19
                 ; 0003 007B     MCUCR=0X80; //enable External memory and I/O control
                 ; 0003 007C 
                 ; 0003 007D     TCCR0=0x04; //Prescaler 64 ??
                 ; 0003 007E     TCNT0=0X06; //??? ???? ??
                 ; 0003 007F     TIMSK=0X01; //TIMER 0 ?????? ??
                 ; 0003 0080 
                 ; 0003 0081 
                 ; 0003 0082     DispChar = c;
                 ; 0003 0083     num_value = (int) (c - '0');
                 ; 0003 0084 
                 ; 0003 0085     for(i=0;i<8;i++)
                 ; 0003 0086     {
                 ; 0003 0087         DOT_YELLOW=~english[num_value][i]; //Orange LED ?? ??(Horizontal)
                 ; 0003 0088         DOT_RED=~0XFF;                   //Red LED ?? ??(Horizontal)
                 ; 0003 0089         LCD_DATABUS=vertical[i];         // ?? ??(Vertical)
                 ; 0003 008A         delay_ms(1);
                 ; 0003 008B     }
                 ; 0003 008C }
                 ;
                 ;void DotMatRefresh(void)
                 ; 0003 008F {
                 _DotMatRefresh:
                 ; 0003 0090     int i=0;
                 ; 0003 0091     int num_value = 0;
                 ; 0003 0092     DDRB=0x00;  //PORTB INPUTPORT Set
0005b6 940e 09aa 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	num_value -> R18,R19
                +
0005b8 e000     +LDI R16 , LOW ( 0 )
0005b9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0005ba e020     +LDI R18 , LOW ( 0 )
0005bb e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0005bc e0e0      	LDI  R30,LOW(0)
0005bd bbe7      	OUT  0x17,R30
                 ; 0003 0093     MCUCR=0X80; //enable External memory and I/O control
0005be e8e0      	LDI  R30,LOW(128)
0005bf bfe5      	OUT  0x35,R30
                 ; 0003 0094 
                 ; 0003 0095     num_value = (int) (DispChar - '0');
0005c0 91e0 08d2 	LDS  R30,_DispChar
0005c2 e0f0      	LDI  R31,0
0005c3 97f0      	SBIW R30,48
0005c4 019f      	MOVW R18,R30
                 ; 0003 0096 
                 ; 0003 0097     for(i=0;i<8;i++)
                +
0005c5 e000     +LDI R16 , LOW ( 0 )
0005c6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x60014:
                +
0005c7 3008     +CPI R16 , LOW ( 8 )
0005c8 e0e0     +LDI R30 , HIGH ( 8 )
0005c9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0005ca f4d4      	BRGE _0x60015
                 ; 0003 0098     {
                 ; 0003 0099         DOT_YELLOW=~english[num_value][i]; //Orange LED ?? ??(Horizontal)
0005cb 01f9      	MOVW R30,R18
0005cc 940e 0999 	CALL __LSLW3
0005ce 51e2      	SUBI R30,LOW(-_english)
0005cf 4ff8      	SBCI R31,HIGH(-_english)
0005d0 0fe0      	ADD  R30,R16
0005d1 1ff1      	ADC  R31,R17
0005d2 81e0      	LD   R30,Z
0005d3 95e0      	COM  R30
0005d4 93e0 8400 	STS  33792,R30
                 ; 0003 009A         DOT_RED=~0XFF;                   //Red LED ?? ??(Horizontal)
0005d6 e0e0      	LDI  R30,LOW(0)
0005d7 93e0 8500 	STS  34048,R30
                 ; 0003 009B         LCD_DATABUS=vertical[i];         // ?? ??(Vertical)
0005d9 eea6      	LDI  R26,LOW(_vertical)
0005da e0b7      	LDI  R27,HIGH(_vertical)
0005db 0fa0      	ADD  R26,R16
0005dc 1fb1      	ADC  R27,R17
0005dd 91ec      	LD   R30,X
0005de 93e0 8300 	STS  33536,R30
                 ; 0003 009C         delay_ms(1);
0005e0 940e 0948 	CALL SUBOPT_0x14
                 ; 0003 009D     }
                +
0005e2 5f0f     +SUBI R16 , LOW ( - 1 )
0005e3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0005e4 cfe2      	RJMP _0x60014
                 _0x60015:
                 ; 0003 009E 
                 ; 0003 009F }
0005e5 940e 09b1 	CALL __LOADLOCR4
0005e7 940c 0816 	JMP  _0x20A0004
                 ;/*****************************************************************************
                 ; *   @file
                 ; *   @brief  Source file of
                 ; *   @author Kyle
                 ; *   @version 1.0.0
                 ; *   @note :    1.
                 ; *              2.
                 ; *              3.
                 ;********************************************************************************/
                 ;
                 ;
                 ;/******************************************************************************/
                 ;/***************************** Include Files **********************************/
                 ;/******************************************************************************/
                 ;#include "clcd.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;/******************************************************************************/
                 ;/************************* Global variable declaration ************************/
                 ;/******************************************************************************/
                 ;extern int num_cnt1;
                 ;extern int num_cnt2;
                 ;
                 ;//static int Toggle=0;
                 ;int num_cnt1=0;
                 ;int num_cnt2=6;
                 
                 	.DSEG
                 ;unsigned char con=0;
                 ;
                 ;
                 ;flash char str[11][17]={        "===LKEMBEDDED===",
                 ;                                 "====  WWW. =====",
                 ;                                "== LKEMBEDDED.==",
                 ;                                "==== CO.KR =====",
                 ;                                "   Education    ",
                 ;                                "   Development  ",
                 ;                                "  AVR Dev & EDU ",
                 ;                                "  PIC Dev & EDU ",
                 ;                                "  ARM Dev & EDU ",
                 ;                                " PADS Dev & EDU ",
                 ;                                "   Cirquit EDU  "
                 ;                                };
                 ;
                 ;/******************************************************************************/
                 ;/************************** Functions Implementation **************************/
                 ;/******************************************************************************/
                 ;void DisplayClr(void);
                 ;void DisplayClrLine1(void);
                 ;void DisplayClrLine2(void);
                 ;
                 ;
                 ;
                 ;void DisplayLCDLine1(char *string)
                 ; 0004 0034 {
                 
                 	.CSEG
                 _DisplayLCDLine1:
                 ; 0004 0035 
                 ; 0004 0036     int size = strlen(string);
                 ; 0004 0037     int i=0;
                 ; 0004 0038     DisplayClrLine1();
0005e9 940e 08b1 	CALL SUBOPT_0x1
                 ;	*string -> Y+4
                 ;	size -> R16,R17
                 ;	i -> R18,R19
0005eb 940e 08b6 	CALL SUBOPT_0x2
0005ed 018f      	MOVW R16,R30
                +
0005ee e020     +LDI R18 , LOW ( 0 )
0005ef e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0005f0 d042      	RCALL _DisplayClrLine1
                 ; 0004 0039     clcd_line1();
0005f1 d065      	RCALL _clcd_line1
                 ; 0004 003A 	for(i=0; i<size; ++i){dsp_str_TLCD(' ');}
                +
0005f2 e020     +LDI R18 , LOW ( 0 )
0005f3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x80005:
                +
0005f4 1720     +CP R18 , R16
0005f5 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
0005f6 f42c      	BRGE _0x80006
0005f7 e2a0      	LDI  R26,LOW(32)
0005f8 d063      	RCALL _dsp_str_TLCD
                +
0005f9 5f2f     +SUBI R18 , LOW ( - 1 )
0005fa 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005fb cff8      	RJMP _0x80005
                 _0x80006:
                 ; 0004 003B     clcd_line1();
0005fc d05a      	RCALL _clcd_line1
                 ; 0004 003C     for(i=0; i<size; ++i){dsp_str_TLCD(string[i]);}
                +
0005fd e020     +LDI R18 , LOW ( 0 )
0005fe e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x80008:
                +
0005ff 1720     +CP R18 , R16
000600 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000601 f444      	BRGE _0x80009
000602 01f9      	MOVW R30,R18
000603 940e 08ba 	CALL SUBOPT_0x3
000605 91ac      	LD   R26,X
000606 d055      	RCALL _dsp_str_TLCD
                +
000607 5f2f     +SUBI R18 , LOW ( - 1 )
000608 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000609 cff5      	RJMP _0x80008
                 _0x80009:
                 ; 0004 003D }
00060a 940e 09b1 	CALL __LOADLOCR4
00060c 940c 085e 	JMP  _0x20A0002
                 ;
                 ;void DisplayLCDLine2(char *string)
                 ; 0004 0040 {
                 _DisplayLCDLine2:
                 ; 0004 0041 	int size = strlen(string);
                 ; 0004 0042     int i=0;
                 ; 0004 0043     DisplayClrLine2();
00060e 940e 08b1 	CALL SUBOPT_0x1
                 ;	*string -> Y+4
                 ;	size -> R16,R17
                 ;	i -> R18,R19
000610 940e 08b6 	CALL SUBOPT_0x2
000612 018f      	MOVW R16,R30
                +
000613 e020     +LDI R18 , LOW ( 0 )
000614 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000615 d02e      	RCALL _DisplayClrLine2
                 ; 0004 0044 	clcd_line2();
000616 d042      	RCALL _clcd_line2
                 ; 0004 0045     for(i=0; i<size; ++i){dsp_str_TLCD(' ');}
                +
000617 e020     +LDI R18 , LOW ( 0 )
000618 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x8000B:
                +
000619 1720     +CP R18 , R16
00061a 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
00061b f42c      	BRGE _0x8000C
00061c e2a0      	LDI  R26,LOW(32)
00061d d03e      	RCALL _dsp_str_TLCD
                +
00061e 5f2f     +SUBI R18 , LOW ( - 1 )
00061f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000620 cff8      	RJMP _0x8000B
                 _0x8000C:
                 ; 0004 0046     clcd_line2();
000621 d037      	RCALL _clcd_line2
                 ; 0004 0047 	for(i=0; i<size; ++i){dsp_str_TLCD(string[i]);}
                +
000622 e020     +LDI R18 , LOW ( 0 )
000623 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x8000E:
                +
000624 1720     +CP R18 , R16
000625 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000626 f444      	BRGE _0x8000F
000627 01f9      	MOVW R30,R18
000628 940e 08ba 	CALL SUBOPT_0x3
00062a 91ac      	LD   R26,X
00062b d030      	RCALL _dsp_str_TLCD
                +
00062c 5f2f     +SUBI R18 , LOW ( - 1 )
00062d 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00062e cff5      	RJMP _0x8000E
                 _0x8000F:
                 ; 0004 0048 }
00062f 940e 09b1 	CALL __LOADLOCR4
000631 940c 085e 	JMP  _0x20A0002
                 ;
                 ;void DisplayTest(void)
                 ; 0004 004B {
                 ; 0004 004C 
                 ; 0004 004D 	int i=0;
                 ; 0004 004E 	clcd_line1();
                 ;	i -> R16,R17
                 ; 0004 004F 	for(i=0; i<16; ++i){dsp_str_TLCD(str[num_cnt1][i]);}
                 ; 0004 0050 
                 ; 0004 0051 	clcd_line2();
                 ; 0004 0052 	for(i=0; i<16; ++i){dsp_str_TLCD(str[num_cnt2][i]);}
                 ; 0004 0053 
                 ; 0004 0054 }
                 ;
                 ;void DisplayClr(void)
                 ; 0004 0057 {
                 ; 0004 0058 
                 ; 0004 0059 	int i=0;
                 ; 0004 005A 	clcd_line1();
                 ;	i -> R16,R17
                 ; 0004 005B 	for(i=0; i<16; ++i){dsp_str_TLCD(' ');}
                 ; 0004 005C 
                 ; 0004 005D 	clcd_line2();
                 ; 0004 005E 	for(i=0; i<16; ++i){dsp_str_TLCD(' ');}
                 ; 0004 005F 
                 ; 0004 0060 }
                 ;
                 ;void DisplayClrLine1(void)
                 ; 0004 0063 {
                 _DisplayClrLine1:
                 ; 0004 0064 	int i=0;
                 ; 0004 0065 	clcd_line1();
000633 931a      	ST   -Y,R17
000634 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000635 e000     +LDI R16 , LOW ( 0 )
000636 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000637 d01f      	RCALL _clcd_line1
                 ; 0004 0066 	for(i=0; i<16; ++i){dsp_str_TLCD(' ');}
                +
000638 e000     +LDI R16 , LOW ( 0 )
000639 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8001D:
                +
00063a 3100     +CPI R16 , LOW ( 16 )
00063b e0e0     +LDI R30 , HIGH ( 16 )
00063c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
00063d f42c      	BRGE _0x8001E
00063e e2a0      	LDI  R26,LOW(32)
00063f d01c      	RCALL _dsp_str_TLCD
                +
000640 5f0f     +SUBI R16 , LOW ( - 1 )
000641 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000642 cff7      	RJMP _0x8001D
                 _0x8001E:
                 ; 0004 0067 
                 ; 0004 0068 }
000643 c010      	RJMP _0x20A000C
                 ;
                 ;void DisplayClrLine2(void)
                 ; 0004 006B {
                 _DisplayClrLine2:
                 ; 0004 006C 
                 ; 0004 006D 	int i=0;
                 ; 0004 006E 	clcd_line2();
000644 931a      	ST   -Y,R17
000645 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000646 e000     +LDI R16 , LOW ( 0 )
000647 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000648 d010      	RCALL _clcd_line2
                 ; 0004 006F 	for(i=0; i<16; ++i){dsp_str_TLCD(' ');}
                +
000649 e000     +LDI R16 , LOW ( 0 )
00064a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x80020:
                +
00064b 3100     +CPI R16 , LOW ( 16 )
00064c e0e0     +LDI R30 , HIGH ( 16 )
00064d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
00064e f42c      	BRGE _0x80021
00064f e2a0      	LDI  R26,LOW(32)
000650 d00b      	RCALL _dsp_str_TLCD
                +
000651 5f0f     +SUBI R16 , LOW ( - 1 )
000652 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000653 cff7      	RJMP _0x80020
                 _0x80021:
                 ; 0004 0070 
                 ; 0004 0071 }
                 _0x20A000C:
000654 9109      	LD   R16,Y+
000655 9119      	LD   R17,Y+
000656 9508      	RET
                 ;
                 ;void clcd_line1(void)
                 ; 0004 0074 {
                 _clcd_line1:
                 ; 0004 0075     dsp_cmd_TLCD(0x80);
000657 e8a0      	LDI  R26,LOW(128)
000658 c001      	RJMP _0x20A000B
                 ; 0004 0076 } //line1
                 ;
                 ;
                 ;void clcd_line2(void)
                 ; 0004 007A {
                 _clcd_line2:
                 ; 0004 007B     dsp_cmd_TLCD(0XC0);
000659 eca0      	LDI  R26,LOW(192)
                 _0x20A000B:
00065a d008      	RCALL _dsp_cmd_TLCD
                 ; 0004 007C } //line2
00065b 9508      	RET
                 ;
                 ;
                 ;void dsp_str_TLCD(char n)
                 ; 0004 0080 {
                 _dsp_str_TLCD:
                 ; 0004 0081     LCD_CON=(con|=0x10);    // E=0, RS=1
00065c 93aa      	ST   -Y,R26
                 ;	n -> Y+0
00065d 2de5      	MOV  R30,R5
00065e 61e0      	ORI  R30,0x10
00065f 940e 094c 	CALL SUBOPT_0x15
                 ; 0004 0082     LCD_DATABUS=n;          // 8bit OUTPUT DATA
                 ; 0004 0083     LCD_CON=(con|=0x50);    // E=1, RS=1
000661 65e0      	ORI  R30,LOW(0x50)
000662 c006      	RJMP _0x20A0009
                 ; 0004 0084     delay_us(1);
                 ; 0004 0085     LCD_CON=(con&=~0x40);   // E=0; RS=1;
                 ; 0004 0086     delay_us(40);
                 ; 0004 0087 }
                 ;
                 ;void dsp_cmd_TLCD(char n)
                 ; 0004 008A {
                 _dsp_cmd_TLCD:
                 ; 0004 008B     LCD_CON=(con&=~0x30);      //E=0, RS=0
000663 93aa      	ST   -Y,R26
                 ;	n -> Y+0
000664 2de5      	MOV  R30,R5
000665 7cef      	ANDI R30,LOW(0xCF)
000666 940e 094c 	CALL SUBOPT_0x15
                 ; 0004 008C     LCD_DATABUS=n;             //8bit OUTPUT DATA=0;
                 ; 0004 008D     LCD_CON=(con|=0X40);       // E=1, RS=0
000668 64e0      	ORI  R30,0x40
                 _0x20A0009:
000669 2e5e      	MOV  R5,R30
00066a 93e0 8200 	STS  33280,R30
                 ; 0004 008E     delay_us(1);
                +
00066c e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
00066d 958a     +DEC R24
00066e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0004 008F     LCD_CON=(con&=~0X40);      // E=0, RS=0
00066f 2de5      	MOV  R30,R5
000670 7bef      	ANDI R30,0xBF
000671 2e5e      	MOV  R5,R30
000672 93e0 8200 	STS  33280,R30
                 ; 0004 0090     delay_us(40);
                +
000674 ed85     +LDI R24 , LOW ( 213 )
                +__DELAY_USB_LOOP :
000675 958a     +DEC R24
000676 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 213
                 ; 0004 0091 }
                 _0x20A000A:
000677 9621      	ADIW R28,1
000678 9508      	RET
                 ;
                 ;void LcdInit() //16x2line
                 ; 0004 0094 {
                 _LcdInit:
                 ; 0004 0095 //    TCCR0=0X04;
                 ; 0004 0096 //	TCNT0=6;
                 ; 0004 0097 //	TIMSK=0X01;
                 ; 0004 0098 //	SREG=0X80;
                 ; 0004 0099 
                 ; 0004 009A     LCD_CON=0X00;
000679 940e 08ab 	CALL SUBOPT_0x0
                 ; 0004 009B     LCD_DATABUS=0X00;
                 ; 0004 009C     //lcd_dt=0; lcd_rw=lcd_rs=lcd_en=0;                                                              Ʈ
                 ; 0004 009D     delay_ms(10); dsp_cmd_TLCD(0x30); //8bit mode
00067b e0aa      	LDI  R26,LOW(10)
00067c 940e 0954 	CALL SUBOPT_0x16
                 ; 0004 009E     delay_ms(5);  dsp_cmd_TLCD(0x30);
00067e e0a5      	LDI  R26,LOW(5)
00067f 940e 0954 	CALL SUBOPT_0x16
                 ; 0004 009F     delay_ms(1);  dsp_cmd_TLCD(0x30);
000681 940e 0948 	CALL SUBOPT_0x14
000683 e3a0      	LDI  R26,LOW(48)
000684 dfde      	RCALL _dsp_cmd_TLCD
                 ; 0004 00A0     delay_ms(5);  dsp_cmd_TLCD(0x38); //function set
000685 e0a5      	LDI  R26,LOW(5)
000686 e0b0      	LDI  R27,0
000687 940e 0986 	CALL _delay_ms
000689 e3a8      	LDI  R26,LOW(56)
00068a dfd8      	RCALL _dsp_cmd_TLCD
                 ; 0004 00A1     dsp_cmd_TLCD(0x0c); //display on/off
00068b e0ac      	LDI  R26,LOW(12)
00068c dfd6      	RCALL _dsp_cmd_TLCD
                 ; 0004 00A2     dsp_cmd_TLCD(0x14); //cursor/display
00068d e1a4      	LDI  R26,LOW(20)
00068e dfd4      	RCALL _dsp_cmd_TLCD
                 ; 0004 00A3     dsp_cmd_TLCD(0x06); //entry mode
00068f e0a6      	LDI  R26,LOW(6)
000690 dfd2      	RCALL _dsp_cmd_TLCD
                 ; 0004 00A4     dsp_cmd_TLCD(0x01); delay_ms(2); //display clear
000691 e0a1      	LDI  R26,LOW(1)
000692 dfd0      	RCALL _dsp_cmd_TLCD
000693 e0a2      	LDI  R26,LOW(2)
000694 e0b0      	LDI  R27,0
000695 940e 0986 	CALL _delay_ms
                 ; 0004 00A5 }
000697 9508      	RET
                 ;
                 ;
                 ;/*****************************************************************************
                 ; *   @file
                 ; *   @brief  Source file of
                 ; *   @author Kyle
                 ; *   @version 1.0.0
                 ; *   @note :    1.
                 ; *              2.
                 ; *              3.
                 ;********************************************************************************/
                 ;
                 ;
                 ;/******************************************************************************/
                 ;/***************************** Include Files **********************************/
                 ;/******************************************************************************/
                 ;#include "uart.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "dotmat.h"
                 ;#include "clcd.h"
                 ;/******************************************************************************/
                 ;/************************* Global variable declaration ************************/
                 ;/******************************************************************************/
                 ;extern int num_cnt1;
                 ;extern int num_cnt2;
                 ;
                 ;/******************************************************************************/
                 ;/************************** Functions Implementation **************************/
                 ;/******************************************************************************/
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0005 001E {
                 
                 	.CSEG
                 _timer0_ovf_isr:
000698 940e 092c 	CALL SUBOPT_0x12
                 ; 0005 001F     //Dotmatrix_Timer();
                 ; 0005 0020     DotMatRefresh();
00069a 940e 05b6 	CALL _DotMatRefresh
                 ; 0005 0021     TCNT0+=0x06;
00069c b7e2      	IN   R30,0x32
00069d 5fea      	SUBI R30,-LOW(6)
00069e bfe2      	OUT  0x32,R30
                 ; 0005 0022 }
00069f 940e 093a 	CALL SUBOPT_0x13
0006a1 9518      	RETI
                 ;
                 ;
                 ;
                 ;//// Timer 0 overflow interrupt service routine
                 ;//interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ;//{
                 ;//	static unsigned int cnt,cnt2=0;
                 ;//	cnt++;
                 ;//	if(cnt==1000)
                 ;//	{
                 ;//	cnt2++;
                 ;//	if(cnt2==2)
                 ;//	{
                 ;//	num_cnt1++;cnt2=0;
                 ;//	}
                 ;//	num_cnt2++;
                 ;//	cnt=0;
                 ;//	}
                 ;//	if(num_cnt1==6)
                 ;//	{
                 ;//	num_cnt1=0;
                 ;//	}
                 ;//	if(num_cnt2==9)
                 ;//	{
                 ;//	num_cnt2=6;
                 ;//	}
                 ;//	TCNT1+=6;
                 ;//}
                 ;/*
                 ; * MIT License
                 ; *
                 ; * Copyright (c) 2019 Sean Farrelly
                 ; *
                 ; * Permission is hereby granted, free of charge, to any person obtaining a copy
                 ; * of this software and associated documentation files (the "Software"), to deal
                 ; * in the Software without restriction, including without limitation the rights
                 ; * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                 ; * copies of the Software, and to permit persons to whom the Software is
                 ; * furnished to do so, subject to the following conditions:
                 ; *
                 ; * The above copyright notice and this permission notice shall be included in all
                 ; * copies or substantial portions of the Software.
                 ; *
                 ; * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                 ; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                 ; * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                 ; * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                 ; * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                 ; * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                 ; * SOFTWARE.
                 ; *
                 ; * File        cli.c
                 ; * Created by  Sean Farrelly
                 ; * Version     1.0
                 ; *
                 ; */
                 ;
                 ;/*! @file cli.c
                 ; * @brief Implementation of command-line interface.
                 ; */
                 ;#include "cli.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;#include <stdint.h>
                 ;#include <string.h>
                 ;extern bit cmd_enter;
                 ;
                 ;static uint8_t buf[MAX_BUF_SIZE];      /* CLI Rx byte-buffer */
                 ;static uint8_t *buf_ptr;               /* Pointer to Rx byte-buffer */
                 ;
                 ;static uint8_t cmd_buf[MAX_BUF_SIZE];  /* CLI command buffer */
                 ;static uint8_t *cmd_ptr;               /* Pointer to command buffer */
                 ;
                 ;const char cli_prompt[] = ">> ";       /* CLI prompt displayed to the user */
                 
                 	.DSEG
                 ;const char cli_unrecog[] = "\r"; //const char cli_unrecog[] = "CMD: Command not recognised \r";
                 ;const char *cli_error_msg[] = { "OK", "Command not recognised" };
                 _0xC0005:
00079b           	.BYTE 0x1A
                 ;
                 ;
                 ;
                 ;
                 ;/*!
                 ; * @brief This internal API prints a message to the user on the CLI.
                 ; */
                 ;static void cli_print(cli_t *cli, const char *msg);
                 ;
                 ;/*!
                 ; * @brief This API initialises the command-line interface.
                 ; */
                 ;cli_status_t cli_init(cli_t *cli)
                 ; 0006 003D {
                 
                 	.CSEG
                 _cli_init:
                 ; 0006 003E     /* Set buffer ptr to beginning of buf */
                 ; 0006 003F     buf_ptr = buf;
0006a2 93ba      	ST   -Y,R27
0006a3 93aa      	ST   -Y,R26
                 ;	*cli -> Y+0
0006a4 940e 095a 	CALL SUBOPT_0x17
                 ; 0006 0040 
                 ; 0006 0041     /* Print the CLI prompt. */
                 ; 0006 0042     cli_print(cli, cli_prompt);
0006a6 81e8      	LD   R30,Y
0006a7 81f9      	LDD  R31,Y+1
0006a8 940e 0961 	CALL SUBOPT_0x18
                 ; 0006 0043 
                 ; 0006 0044     return CLI_OK;
0006aa c101      	RJMP _0x20A0005
                 ; 0006 0045 }
                 ;
                 ;/*!
                 ; * @brief This API deinitialises the command-line interface.
                 ; */
                 ;cli_status_t cli_deinit(cli_t *cli)
                 ; 0006 004B {
                 ; 0006 004C     return CLI_OK;
                 ;	*cli -> Y+0
                 ; 0006 004D }
                 ;
                 ;
                 ;/*! @brief This API must be periodically called by the user to process and execute
                 ; *         any commands received.
                 ; */
                 ;cli_status_t cli_process(cli_t *cli)
                 ; 0006 0054 {
                 _cli_process:
                 ; 0006 0055     uint8_t argc = 0;
                 ; 0006 0056     int i = 0;
                 ; 0006 0057     char *argv[30];
                 ; 0006 0058     if(cmd_enter)
0006ab 93ba      	ST   -Y,R27
0006ac 93aa      	ST   -Y,R26
0006ad 97ec      	SBIW R28,60
0006ae 940e 09aa 	CALL __SAVELOCR4
                 ;	*cli -> Y+64
                 ;	argc -> R17
                 ;	i -> R18,R19
                 ;	argv -> Y+4
0006b0 e010      	LDI  R17,0
                +
0006b1 e020     +LDI R18 , LOW ( 0 )
0006b2 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0006b3 fe21      	SBRS R2,1
0006b4 c080      	RJMP _0xC0007
                 ; 0006 0059     {
                 ; 0006 005A         cmd_enter = 0;
0006b5 94e8      	CLT
0006b6 f821      	BLD  R2,1
                 ; 0006 005B         /* Get the first token (cmd name) */
                 ; 0006 005C         argv[argc] = strtok(cmd_buf, " ");
0006b7 940e 0969 	CALL SUBOPT_0x19
0006b9 0fee      	LSL  R30
0006ba 1fff      	ROL  R31
0006bb 0fea      	ADD  R30,R26
0006bc 1ffb      	ADC  R31,R27
0006bd 93ff      	PUSH R31
0006be 93ef      	PUSH R30
0006bf e5e9      	LDI  R30,LOW(_cmd_buf_G006)
0006c0 e0f9      	LDI  R31,HIGH(_cmd_buf_G006)
0006c1 940e 096e 	CALL SUBOPT_0x1A
0006c3 91af      	POP  R26
0006c4 91bf      	POP  R27
0006c5 93ed      	ST   X+,R30
0006c6 93fc      	ST   X,R31
                 ; 0006 005D 
                 ; 0006 005E         /* Walk through the other tokens (parameters) */
                 ; 0006 005F         while((argv[argc] != NULL) && (argc < 30))
                 _0xC0008:
0006c7 940e 0969 	CALL SUBOPT_0x19
0006c9 940e 0915 	CALL SUBOPT_0xF
0006cb 9730      	SBIW R30,0
0006cc f011      	BREQ _0xC000B
0006cd 311e      	CPI  R17,30
0006ce f008      	BRLO _0xC000C
                 _0xC000B:
0006cf c012      	RJMP _0xC000A
                 _0xC000C:
                 ; 0006 0060         {
                 ; 0006 0061             argv[++argc] = strtok(NULL, " ");
0006d0 5f1f      	SUBI R17,-LOW(1)
0006d1 940e 0969 	CALL SUBOPT_0x19
0006d3 0fee      	LSL  R30
0006d4 1fff      	ROL  R31
0006d5 0fea      	ADD  R30,R26
0006d6 1ffb      	ADC  R31,R27
0006d7 93ff      	PUSH R31
0006d8 93ef      	PUSH R30
0006d9 e0e0      	LDI  R30,LOW(0)
0006da e0f0      	LDI  R31,HIGH(0)
0006db 940e 096e 	CALL SUBOPT_0x1A
0006dd 91af      	POP  R26
0006de 91bf      	POP  R27
0006df 93ed      	ST   X+,R30
0006e0 93fc      	ST   X,R31
                 ; 0006 0062         }
0006e1 cfe5      	RJMP _0xC0008
                 _0xC000A:
                 ; 0006 0063 
                 ; 0006 0064         /* Search the command table for a matching command, using argv[0]
                 ; 0006 0065          * which is the command name. */
                 ; 0006 0066         for(i = 0 ; i < cli->cmd_cnt ; i++)
                +
0006e2 e020     +LDI R18 , LOW ( 0 )
0006e3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0xC000E:
                +
0006e4 01de     +MOVW R26 , R28
0006e5 5ca0     +SUBI R26 , LOW ( - 64 )
0006e6 4fbf     +SBCI R27 , HIGH ( - 64 )
0006e7 900d     +LD R0 , X +
0006e8 91bc     +LD R27 , X
0006e9 2da0     +MOV R26 , R0
                 	__GETW2SX 64
0006ea 9614      	ADIW R26,4
0006eb 940e 09a0 	CALL __GETW1P
0006ed 172e      	CP   R18,R30
0006ee 073f      	CPC  R19,R31
0006ef f5c8      	BRSH _0xC000F
                 ; 0006 0067         {
                 ; 0006 0068             if(strcmp(argv[0], cli->cmd_tbl[i].cmd) == 0)
0006f0 940e 0974 	CALL SUBOPT_0x1B
                +
0006f2 01fe     +MOVW R30 , R28
0006f3 5bee     +SUBI R30 , LOW ( - 66 )
0006f4 4fff     +SBCI R31 , HIGH ( - 66 )
0006f5 9001     +LD R0 , Z +
0006f6 81f0     +LD R31 , Z
0006f7 2de0     +MOV R30 , R0
                 	__GETW1SX 66
0006f8 81a2      	LDD  R26,Z+2
0006f9 81b3      	LDD  R27,Z+3
0006fa 01f9      	MOVW R30,R18
0006fb 940e 099b 	CALL __LSLW2
0006fd 0fae      	ADD  R26,R30
0006fe 1fbf      	ADC  R27,R31
0006ff 940e 09a0 	CALL __GETW1P
000701 01df      	MOVW R26,R30
000702 940e 07bf 	CALL _strcmp
000704 30e0      	CPI  R30,0
000705 f501      	BRNE _0xC0010
                 ; 0006 0069             {
                 ; 0006 006A                 /* Found a match, execute the associated function. */
                 ; 0006 006B                 cli->cmd_tbl[i].func(argc, argv);
000706 940e 0979 	CALL SUBOPT_0x1C
000708 81a2      	LDD  R26,Z+2
000709 81b3      	LDD  R27,Z+3
00070a 01f9      	MOVW R30,R18
00070b 940e 099b 	CALL __LSLW2
00070d 0fae      	ADD  R26,R30
00070e 1fbf      	ADC  R27,R31
00070f 9612      	ADIW R26,2
000710 940e 09a0 	CALL __GETW1P
000712 93ff      	PUSH R31
000713 93ef      	PUSH R30
000714 2fe1      	MOV  R30,R17
000715 e0f0      	LDI  R31,0
000716 93fa      	ST   -Y,R31
000717 93ea      	ST   -Y,R30
000718 01de      	MOVW R26,R28
000719 9616      	ADIW R26,6
00071a 91ef      	POP  R30
00071b 91ff      	POP  R31
00071c 9509      	ICALL
                 ; 0006 006C                 UartSend( '\r' );
00071d e0ad      	LDI  R26,LOW(13)
00071e e0b0      	LDI  R27,0
00071f 940e 0580 	CALL _UartSend
                 ; 0006 006D                 cli_print(cli, cli_prompt);
000721 940e 0979 	CALL SUBOPT_0x1C
000723 940e 0961 	CALL SUBOPT_0x18
                 ; 0006 006E 
                 ; 0006 006F                 return CLI_OK;
000725 c00f      	RJMP _0x20A0008
                 ; 0006 0070                 //return cli->cmd_tbl[i].func(argc, argv);
                 ; 0006 0071             }
                 ; 0006 0072         }
                 _0xC0010:
                +
000726 5f2f     +SUBI R18 , LOW ( - 1 )
000727 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000728 cfbb      	RJMP _0xC000E
                 _0xC000F:
                 ; 0006 0073 
                 ; 0006 0074 
                 ; 0006 0075         /* Command not found */
                 ; 0006 0076         cli_print(cli, cli_unrecog);
000729 940e 0979 	CALL SUBOPT_0x1C
00072b 93fa      	ST   -Y,R31
00072c 93ea      	ST   -Y,R30
00072d edad      	LDI  R26,LOW(_cli_unrecog)
00072e e0b9      	LDI  R27,HIGH(_cli_unrecog)
00072f d057      	RCALL _cli_print_G006
                 ; 0006 0077         cli_print(cli, cli_prompt);
000730 940e 0979 	CALL SUBOPT_0x1C
000732 940e 0980 	CALL SUBOPT_0x1D
                 ; 0006 0078         return CLI_E_CMD_NOT_FOUND;
000734 e0e3      	LDI  R30,LOW(3)
                 ; 0006 0079     }
                 ; 0006 007A }
                 _0xC0007:
                 _0x20A0008:
000735 940e 09b1 	CALL __LOADLOCR4
000737 96ef      	ADIW R28,63
000738 9623      	ADIW R28,3
000739 9508      	RET
                 ;
                 ;/*!
                 ; * @brief This API should be called from the devices interrupt handler whenever a
                 ; *        character is received over the input stream.
                 ; */
                 ;cli_status_t cli_put(cli_t *cli, char c)
                 ; 0006 0081 {
                 _cli_put:
                 ; 0006 0082     switch(c)
00073a 93aa      	ST   -Y,R26
                 ;	*cli -> Y+1
                 ;	c -> Y+0
00073b 81e8      	LD   R30,Y
00073c e0f0      	LDI  R31,0
                 ; 0006 0083     {
                 ; 0006 0084     case '\r':
00073d 30ed      	CPI  R30,LOW(0xD)
00073e e0a0      	LDI  R26,HIGH(0xD)
00073f 07fa      	CPC  R31,R26
000740 f4b9      	BRNE _0xC0014
                 ; 0006 0085 
                 ; 0006 0086         *buf_ptr = '\0';            /* Terminate the msg and reset the msg ptr.      */
000741 91a0 0957 	LDS  R26,_buf_ptr_G006
000743 91b0 0958 	LDS  R27,_buf_ptr_G006+1
000745 e0e0      	LDI  R30,LOW(0)
000746 93ec      	ST   X,R30
                 ; 0006 0087         strcpy(cmd_buf, buf);       /* Copy string to command buffer for processing. */
000747 e5e9      	LDI  R30,LOW(_cmd_buf_G006)
000748 e0f9      	LDI  R31,HIGH(_cmd_buf_G006)
000749 93fa      	ST   -Y,R31
00074a 93ea      	ST   -Y,R30
00074b eda7      	LDI  R26,LOW(_buf_G006)
00074c e0b8      	LDI  R27,HIGH(_buf_G006)
00074d 940e 07d3 	CALL _strcpy
                 ; 0006 0088         buf_ptr = buf;              /* Reset buf_ptr to beginning.                   */
00074f 940e 095a 	CALL SUBOPT_0x17
                 ; 0006 0089         cli_print(cli, cli_prompt); /* Print the CLI prompt to the user.             */
000751 81e9      	LDD  R30,Y+1
000752 81fa      	LDD  R31,Y+1+1
000753 940e 0980 	CALL SUBOPT_0x1D
                 ; 0006 008A         cmd_enter = 1;
000755 9468      	SET
000756 f821      	BLD  R2,1
                 ; 0006 008B         break;
000757 c02d      	RJMP _0xC0013
                 ; 0006 008C 
                 ; 0006 008D     case '\b':
                 _0xC0014:
000758 30e8      	CPI  R30,LOW(0x8)
000759 e0a0      	LDI  R26,HIGH(0x8)
00075a 07fa      	CPC  R31,R26
00075b f489      	BRNE _0xC0017
                 ; 0006 008E         /* Backspace. Delete character. */
                 ; 0006 008F         if(buf_ptr > buf)
00075c ede7      	LDI  R30,LOW(_buf_G006)
00075d e0f8      	LDI  R31,HIGH(_buf_G006)
00075e 91a0 0957 	LDS  R26,_buf_ptr_G006
000760 91b0 0958 	LDS  R27,_buf_ptr_G006+1
000762 17ea      	CP   R30,R26
000763 07fb      	CPC  R31,R27
000764 f438      	BRSH _0xC0016
                 ; 0006 0090             buf_ptr--;
000765 e5a7      	LDI  R26,LOW(_buf_ptr_G006)
000766 e0b9      	LDI  R27,HIGH(_buf_ptr_G006)
000767 91ed      	LD   R30,X+
000768 91fd      	LD   R31,X+
000769 9731      	SBIW R30,1
00076a 93fe      	ST   -X,R31
00076b 93ee      	ST   -X,R30
                 ; 0006 0091         break;
                 _0xC0016:
00076c c018      	RJMP _0xC0013
                 ; 0006 0092 
                 ; 0006 0093     default:
                 _0xC0017:
                 ; 0006 0094         /* Normal character received, add to buffer. */
                 ; 0006 0095         if((buf_ptr - buf) < MAX_BUF_SIZE)
00076d eda7      	LDI  R26,LOW(_buf_G006)
00076e e0b8      	LDI  R27,HIGH(_buf_G006)
00076f 91e0 0957 	LDS  R30,_buf_ptr_G006
000771 91f0 0958 	LDS  R31,_buf_ptr_G006+1
000773 1bea      	SUB  R30,R26
000774 0bfb      	SBC  R31,R27
000775 38e0      	CPI  R30,LOW(0x80)
000776 e0a0      	LDI  R26,HIGH(0x80)
000777 07fa      	CPC  R31,R26
000778 f458      	BRSH _0xC0018
                 ; 0006 0096             *buf_ptr++ = c;
000779 e5a7      	LDI  R26,LOW(_buf_ptr_G006)
00077a e0b9      	LDI  R27,HIGH(_buf_ptr_G006)
00077b 91ed      	LD   R30,X+
00077c 91fd      	LD   R31,X+
00077d 9631      	ADIW R30,1
00077e 93fe      	ST   -X,R31
00077f 93ee      	ST   -X,R30
000780 9731      	SBIW R30,1
000781 81a8      	LD   R26,Y
000782 83a0      	STD  Z+0,R26
                 ; 0006 0097         else
000783 c001      	RJMP _0xC0019
                 _0xC0018:
                 ; 0006 0098             return CLI_E_BUF_FULL;
000784 e0e5      	LDI  R30,LOW(5)
                 ; 0006 0099         break;
                 _0xC0019:
                 ; 0006 009A     }
                 _0xC0013:
                 ; 0006 009B }
                 _0x20A0007:
000785 9623      	ADIW R28,3
000786 9508      	RET
                 ;
                 ;/*!
                 ; * @brief Print a message on the command-line interface.
                 ; */
                 ;static void cli_print(cli_t *cli, const char *msg)
                 ; 0006 00A1 {
                 _cli_print_G006:
                 ; 0006 00A2     /* Temp buffer to store text in ram first */
                 ; 0006 00A3     char buf[50];
                 ; 0006 00A4 
                 ; 0006 00A5     strcpy(buf, msg);
000787 93ba      	ST   -Y,R27
000788 93aa      	ST   -Y,R26
000789 97e2      	SBIW R28,50
                 ;	*cli -> Y+52
                 ;	*msg -> Y+50
                 ;	buf -> Y+0
00078a 01fe      	MOVW R30,R28
00078b 93fa      	ST   -Y,R31
00078c 93ea      	ST   -Y,R30
00078d a9ac      	LDD  R26,Y+52
00078e a9bd      	LDD  R27,Y+52+1
00078f 940e 07d3 	CALL _strcpy
                 ; 0006 00A6     cli->println(buf);
000791 a9ac      	LDD  R26,Y+52
000792 a9bd      	LDD  R27,Y+52+1
000793 940e 09a0 	CALL __GETW1P
000795 93ff      	PUSH R31
000796 93ef      	PUSH R30
000797 01de      	MOVW R26,R28
000798 91ef      	POP  R30
000799 91ff      	POP  R31
00079a 9509      	ICALL
                 ; 0006 00A7 }
00079b 96e6      	ADIW R28,54
00079c 9508      	RET
                 ;/*****************************************************************************
                 ; *   @file
                 ; *   @brief  Source file of
                 ; *   @author Kyle
                 ; *   @version 1.0.0
                 ; *   @note :    1.
                 ; *              2.
                 ; *              3.
                 ;********************************************************************************/
                 ;
                 ;
                 ;/******************************************************************************/
                 ;/***************************** Include Files **********************************/
                 ;/******************************************************************************/
                 ;#include "led7.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;/******************************************************************************/
                 ;/************************* Global variable declaration ************************/
                 ;/******************************************************************************/
                 ;char Num[11]={0X3F,0X06,0X5B,0X4F,0X66,0X6D,0X7D,0X27,0X7F,0X6F};  //0~9 ????  FND2
                 
                 	.DSEG
                 ;int FndCnt;
                 ;
                 ;/******************************************************************************/
                 ;/************************** Functions Implementation **************************/
                 ;/******************************************************************************/
                 ;
                 ;
                 ;void Led7Init(void)
                 ; 0007 001D {
                 
                 	.CSEG
                 _Led7Init:
                 ; 0007 001E     MCUCR=0X80; //enable External memory and I/O control
                 _0x20A0006:
00079d e8e0      	LDI  R30,LOW(128)
00079e bfe5      	OUT  0x35,R30
                 ; 0007 001F }
00079f 9508      	RET
                 ;
                 ;void Led7Disp(int value)
                 ; 0007 0022 {
                 ; 0007 0023     char j,k,l,m = 0;
                 ; 0007 0024     static int cnt = 0;
                 ; 0007 0025     cnt++;
                 ;	value -> Y+4
                 ;	j -> R17
                 ;	k -> R16
                 ;	l -> R19
                 ;	m -> R18
                 ; 0007 0026     j=value/1000;          //-------1000???
                 ; 0007 0027     k=(value%1000)/100;    //-------100???
                 ; 0007 0028     l=(value%100)/10;      //-------10???
                 ; 0007 0029     m=(value%10);          //-------1???
                 ; 0007 002A 
                 ; 0007 002B     switch(cnt)
                 ; 0007 002C     {
                 ; 0007 002D         case 1:
                 ; 0007 002E         SET_CON=FND1_ON|FND2_OFF|FND3_OFF|FND4_OFF;
                 ; 0007 002F         LCD_DATABUS=Num[j]; //1000???
                 ; 0007 0030         break;
                 ; 0007 0031         case 2:
                 ; 0007 0032         SET_CON=FND2_ON|FND1_OFF|FND3_OFF|FND4_OFF;
                 ; 0007 0033         LCD_DATABUS=Num[k]; //100? ??
                 ; 0007 0034         break;
                 ; 0007 0035         case 3:
                 ; 0007 0036         SET_CON=FND3_ON|FND1_OFF|FND2_OFF|FND4_OFF;
                 ; 0007 0037         LCD_DATABUS=Num[l]; //10? ??
                 ; 0007 0038         break;
                 ; 0007 0039         case 4:
                 ; 0007 003A         SET_CON=FND4_ON|FND1_OFF|FND2_OFF|FND3_OFF;
                 ; 0007 003B         LCD_DATABUS=Num[m]; //1? ??
                 ; 0007 003C         break;
                 ; 0007 003D         default:cnt=0; //cnt ???
                 ; 0007 003E     }
                 ; 0007 003F 
                 ; 0007 0040 //    SET_CON=FND1_ON|FND2_OFF|FND3_OFF|FND4_OFF;
                 ; 0007 0041 //    LCD_DATABUS=Num[j]; //1000???
                 ; 0007 0042 //
                 ; 0007 0043 //    SET_CON=FND2_ON|FND1_OFF|FND3_OFF|FND4_OFF;
                 ; 0007 0044 //    LCD_DATABUS=Num[k]; //100? ??
                 ; 0007 0045 //
                 ; 0007 0046 //    SET_CON=FND3_ON|FND1_OFF|FND2_OFF|FND4_OFF;
                 ; 0007 0047 //    LCD_DATABUS=Num[l]; //10? ??
                 ; 0007 0048 //
                 ; 0007 0049 //    SET_CON=FND4_ON|FND1_OFF|FND2_OFF|FND3_OFF;
                 ; 0007 004A //    LCD_DATABUS=Num[m]; //1? ??
                 ; 0007 004B 
                 ; 0007 004C 
                 ; 0007 004D }
                 ;
                 ;void Led7Disp1(int value)
                 ; 0007 0050 {
                 _Led7Disp1:
                 ; 0007 0051 
                 ; 0007 0052     SET_CON=FND4_ON|FND1_OFF|FND2_OFF|FND3_OFF;
0007a0 93ba      	ST   -Y,R27
0007a1 93aa      	ST   -Y,R26
                 ;	value -> Y+0
0007a2 e2e0      	LDI  R30,LOW(32)
0007a3 93e0 8100 	STS  33024,R30
                 ; 0007 0053     LCD_DATABUS=Num[value]; //1? ??
0007a5 81e8      	LD   R30,Y
0007a6 81f9      	LDD  R31,Y+1
0007a7 52e1      	SUBI R30,LOW(-_Num)
0007a8 4ff6      	SBCI R31,HIGH(-_Num)
0007a9 81e0      	LD   R30,Z
0007aa 93e0 8300 	STS  33536,R30
                 ; 0007 0054 
                 ; 0007 0055 
                 ; 0007 0056 }
                 _0x20A0005:
0007ac 9622      	ADIW R28,2
0007ad 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcat:
0007ae 93ba      	ST   -Y,R27
0007af 93aa      	ST   -Y,R26
0007b0 91e9          ld   r30,y+
0007b1 91f9          ld   r31,y+
0007b2 91a9          ld   r26,y+
0007b3 91b9          ld   r27,y+
0007b4 01cd          movw r24,r26
                 strcat0:
0007b5 916d          ld   r22,x+
0007b6 2366          tst  r22
0007b7 f7e9          brne strcat0
0007b8 9711          sbiw r26,1
                 strcat1:
0007b9 9161          ld   r22,z+
0007ba 936d          st   x+,r22
0007bb 2366          tst  r22
0007bc f7e1          brne strcat1
0007bd 01fc          movw r30,r24
0007be 9508          ret
                 _strcmp:
0007bf 93ba      	ST   -Y,R27
0007c0 93aa      	ST   -Y,R26
0007c1 91e9          ld   r30,y+
0007c2 91f9          ld   r31,y+
0007c3 91a9          ld   r26,y+
0007c4 91b9          ld   r27,y+
                 strcmp0:
0007c5 916d          ld   r22,x+
0007c6 9171          ld   r23,z+
0007c7 1767          cp   r22,r23
0007c8 f421          brne strcmp1
0007c9 2366          tst  r22
0007ca f7d1          brne strcmp0
                 strcmp3:
0007cb 27ee          clr  r30
0007cc 9508          ret
                 strcmp1:
0007cd 1b67          sub  r22,r23
0007ce f3e1          breq strcmp3
0007cf e0e1          ldi  r30,1
0007d0 f408          brcc strcmp2
0007d1 50e2          subi r30,2
                 strcmp2:
0007d2 9508          ret
                 _strcpy:
0007d3 93ba      	ST   -Y,R27
0007d4 93aa      	ST   -Y,R26
0007d5 91e9          ld   r30,y+
0007d6 91f9          ld   r31,y+
0007d7 91a9          ld   r26,y+
0007d8 91b9          ld   r27,y+
0007d9 01cd          movw r24,r26
                 strcpy0:
0007da 9161          ld   r22,z+
0007db 936d          st   x+,r22
0007dc 2366          tst  r22
0007dd f7e1          brne strcpy0
0007de 01fc          movw r30,r24
0007df 9508          ret
                 _strlen:
0007e0 93ba      	ST   -Y,R27
0007e1 93aa      	ST   -Y,R26
0007e2 91a9          ld   r26,y+
0007e3 91b9          ld   r27,y+
0007e4 27ee          clr  r30
0007e5 27ff          clr  r31
                 strlen0:
0007e6 916d          ld   r22,x+
0007e7 2366          tst  r22
0007e8 f011          breq strlen1
0007e9 9631          adiw r30,1
0007ea cffb          rjmp strlen0
                 strlen1:
0007eb 9508          ret
                 _strpbrkf:
0007ec 93ba      	ST   -Y,R27
0007ed 93aa      	ST   -Y,R26
0007ee 81bb          ldd  r27,y+3
0007ef 81aa          ldd  r26,y+2
                 strpbrkf0:
0007f0 916c          ld   r22,x
0007f1 2366          tst  r22
0007f2 f061          breq strpbrkf2
0007f3 81f9          ldd  r31,y+1
0007f4 81e8          ld   r30,y
                 strpbrkf1:
0007f5 95c8      	lpm
0007f6 2000          tst  r0
0007f7 f029          breq strpbrkf3
0007f8 9631          adiw r30,1
0007f9 1560          cp   r22,r0
0007fa f7d1          brne strpbrkf1
0007fb 01fd          movw r30,r26
0007fc c004          rjmp strpbrkf4
                 strpbrkf3:
0007fd 9611          adiw r26,1
0007fe cff1          rjmp strpbrkf0
                 strpbrkf2:
0007ff 27ee          clr  r30
000800 27ff          clr  r31
                 strpbrkf4:
000801 940c 0816 	JMP  _0x20A0003
                 _strspnf:
000803 93ba      	ST   -Y,R27
000804 93aa      	ST   -Y,R26
000805 81bb          ldd  r27,y+3
000806 81aa          ldd  r26,y+2
000807 2788          clr  r24
000808 2799          clr  r25
                 strspnf0:
000809 916d          ld   r22,x+
00080a 2366          tst  r22
00080b f049          breq strspnf2
00080c 81f9          ldd  r31,y+1
00080d 81e8          ld   r30,y
                 strspnf1:
00080e 9005      	lpm  r0,z+
00080f 2000          tst  r0
000810 f021          breq strspnf2
000811 1560          cp   r22,r0
000812 f7d9          brne strspnf1
000813 9601          adiw r24,1
000814 cff4          rjmp strspnf0
                 strspnf2:
000815 01fc          movw r30,r24
                 _0x20A0003:
                 _0x20A0004:
000816 9624      	ADIW R28,4
000817 9508      	RET
                 _strtok:
000818 93ba      	ST   -Y,R27
000819 93aa      	ST   -Y,R26
00081a 931a      	ST   -Y,R17
00081b 930a      	ST   -Y,R16
00081c 81ec      	LDD  R30,Y+4
00081d 81fd      	LDD  R31,Y+4+1
00081e 9730      	SBIW R30,0
00081f f479      	BRNE _0x2020003
000820 91e0 09ea 	LDS  R30,_p_S1010026000
000822 91f0 09eb 	LDS  R31,_p_S1010026000+1
000824 9730      	SBIW R30,0
000825 f419      	BRNE _0x2020004
000826 e0e0      	LDI  R30,LOW(0)
000827 e0f0      	LDI  R31,HIGH(0)
000828 c033      	RJMP _0x20A0001
                 _0x2020004:
000829 91e0 09ea 	LDS  R30,_p_S1010026000
00082b 91f0 09eb 	LDS  R31,_p_S1010026000+1
00082d 83ec      	STD  Y+4,R30
00082e 83fd      	STD  Y+4+1,R31
                 _0x2020003:
00082f 940e 0974 	CALL SUBOPT_0x1B
000831 81ac      	LDD  R26,Y+4
000832 81bd      	LDD  R27,Y+4+1
000833 940e 0803 	CALL _strspnf
000835 81ac      	LDD  R26,Y+4
000836 81bd      	LDD  R27,Y+4+1
000837 0fea      	ADD  R30,R26
000838 1ffb      	ADC  R31,R27
000839 83ec      	STD  Y+4,R30
00083a 83fd      	STD  Y+4+1,R31
00083b 81ac      	LDD  R26,Y+4
00083c 81bd      	LDD  R27,Y+4+1
00083d 91ec      	LD   R30,X
00083e 30e0      	CPI  R30,0
00083f f441      	BRNE _0x2020005
000840 e0e0      	LDI  R30,LOW(0)
000841 93e0 09ea 	STS  _p_S1010026000,R30
000843 93e0 09eb 	STS  _p_S1010026000+1,R30
000845 e0e0      	LDI  R30,LOW(0)
000846 e0f0      	LDI  R31,HIGH(0)
000847 c014      	RJMP _0x20A0001
                 _0x2020005:
000848 940e 0974 	CALL SUBOPT_0x1B
00084a 81ac      	LDD  R26,Y+4
00084b 81bd      	LDD  R27,Y+4+1
00084c 940e 07ec 	CALL _strpbrkf
00084e 018f      	MOVW R16,R30
00084f 9730      	SBIW R30,0
000850 f029      	BREQ _0x2020006
000851 01d8      	MOVW R26,R16
                +
000852 5f0f     +SUBI R16 , LOW ( - 1 )
000853 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000854 e0e0      	LDI  R30,LOW(0)
000855 93ec      	ST   X,R30
                 _0x2020006:
                +
000856 9300 09ea+STS _p_S1010026000 + ( 0 ) , R16
000858 9310 09eb+STS _p_S1010026000 + ( 0 ) + 1 , R17
                 	__PUTWMRN _p_S1010026000,0,16,17
00085a 81ec      	LDD  R30,Y+4
00085b 81fd      	LDD  R31,Y+4+1
                 _0x20A0001:
00085c 8119      	LDD  R17,Y+1
00085d 8108      	LDD  R16,Y+0
                 _0x20A0002:
00085e 9626      	ADIW R28,6
00085f 9508      	RET
                 
                 	.CSEG
                 _atoi:
000860 93ba      	ST   -Y,R27
000861 93aa      	ST   -Y,R26
000862 81b9         	ldd  r27,y+1
000863 81a8         	ld   r26,y
                 __atoi0:
000864 91ec         	ld   r30,x
000865 2f8a              mov  r24,r26
000866 2fae      	MOV  R26,R30
000867 940e 08a0 	CALL _isspace
000869 2fa8              mov  r26,r24
00086a 23ee         	tst  r30
00086b f011         	breq __atoi1
00086c 9611         	adiw r26,1
00086d cff6         	rjmp __atoi0
                 __atoi1:
00086e 94e8         	clt
00086f 91ec         	ld   r30,x
000870 32ed         	cpi  r30,'-'
000871 f411         	brne __atoi2
000872 9468         	set
000873 c002         	rjmp __atoi3
                 __atoi2:
000874 32eb         	cpi  r30,'+'
000875 f409         	brne __atoi4
                 __atoi3:
000876 9611         	adiw r26,1
                 __atoi4:
000877 2766         	clr  r22
000878 2777         	clr  r23
                 __atoi5:
000879 91ec         	ld   r30,x
00087a 2f8a              mov  r24,r26
00087b 2fae      	MOV  R26,R30
00087c 940e 0897 	CALL _isdigit
00087e 2fa8              mov  r26,r24
00087f 23ee         	tst  r30
000880 f079         	breq __atoi6
000881 01fb         	movw r30,r22
000882 0f66         	lsl  r22
000883 1f77         	rol  r23
000884 0f66         	lsl  r22
000885 1f77         	rol  r23
000886 0f6e         	add  r22,r30
000887 1f7f         	adc  r23,r31
000888 0f66         	lsl  r22
000889 1f77         	rol  r23
00088a 91ed         	ld   r30,x+
00088b 27ff         	clr  r31
00088c 53e0         	subi r30,'0'
00088d 0f6e         	add  r22,r30
00088e 1f7f         	adc  r23,r31
00088f cfe9         	rjmp __atoi5
                 __atoi6:
000890 01fb         	movw r30,r22
000891 f41e         	brtc __atoi7
000892 95e0         	com  r30
000893 95f0         	com  r31
000894 9631         	adiw r30,1
                 __atoi7:
000895 9622         	adiw r28,2
000896 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _isdigit:
000897 93aa      	ST   -Y,R26
000898 e0e1          ldi  r30,1
000899 91f9          ld   r31,y+
00089a 33f0          cpi  r31,'0'
00089b f010          brlo isdigit0
00089c 33fa          cpi  r31,'9'+1
00089d f008          brlo isdigit1
                 isdigit0:
00089e 27ee          clr  r30
                 isdigit1:
00089f 9508          ret
                 _isspace:
0008a0 93aa      	ST   -Y,R26
0008a1 e0e1          ldi  r30,1
0008a2 91f9          ld   r31,y+
0008a3 32f0          cpi  r31,' '
0008a4 f029          breq isspace1
0008a5 30f9          cpi  r31,9
0008a6 f010          brlo isspace0
0008a7 30fe          cpi  r31,13+1
0008a8 f008          brlo isspace1
                 isspace0:
0008a9 27ee          clr  r30
                 isspace1:
0008aa 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
0007b5           	.BYTE 0x11
                 _cli:
0007c6           	.BYTE 0x6
                 _cmd_tbl:
0007cc           	.BYTE 0x18
                 _LedCtrl:
0007e4           	.BYTE 0x2
                 _vertical:
0007e6           	.BYTE 0x8
                 _english:
0007ee           	.BYTE 0xE0
                 _Toggle_G003:
0008ce           	.BYTE 0x2
                 _num_cnt_G003:
0008d0           	.BYTE 0x2
                 _DispChar:
0008d2           	.BYTE 0x1
                 _num_cnt1:
0008d3           	.BYTE 0x2
                 _num_cnt2:
0008d5           	.BYTE 0x2
                 _buf_G006:
0008d7           	.BYTE 0x80
                 _buf_ptr_G006:
000957           	.BYTE 0x2
                 _cmd_buf_G006:
000959           	.BYTE 0x80
                 _cli_prompt:
0009d9           	.BYTE 0x4
                 _cli_unrecog:
0009dd           	.BYTE 0x2
                 _Num:
0009df           	.BYTE 0xB
                 _p_S1010026000:
0009ea           	.BYTE 0x2
                 __seed_G102:
0009ec           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0008ab e0e0      	LDI  R30,LOW(0)
0008ac 93e0 8200 	STS  33280,R30
0008ae 93e0 8300 	STS  33536,R30
0008b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0008b1 93ba      	ST   -Y,R27
0008b2 93aa      	ST   -Y,R26
0008b3 940e 09aa 	CALL __SAVELOCR4
0008b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0008b6 81ac      	LDD  R26,Y+4
0008b7 81bd      	LDD  R27,Y+4+1
0008b8 940c 07e0 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0008ba 81ac      	LDD  R26,Y+4
0008bb 81bd      	LDD  R27,Y+4+1
0008bc 0fae      	ADD  R26,R30
0008bd 1fbf      	ADC  R27,R31
0008be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:54 WORDS
                 SUBOPT_0x4:
                +
0008bf 91e0 07c6+LDS R30 , _cli + ( 0 )
0008c1 91f0 07c7+LDS R31 , _cli + ( 0 ) + 1
0008c3 9509     +ICALL
                 	__CALL1MN _cli,0
0008c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0008c5 93ba      	ST   -Y,R27
0008c6 93aa      	ST   -Y,R26
0008c7 931a      	ST   -Y,R17
0008c8 930a      	ST   -Y,R16
0008c9 81ac      	LDD  R26,Y+4
0008ca 81bd      	LDD  R27,Y+4+1
0008cb 940e 09a4 	CALL __CPW02
0008cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0008ce 81ea      	LDD  R30,Y+2
0008cf 81fb      	LDD  R31,Y+2+1
0008d0 81a2      	LDD  R26,Z+2
0008d1 81b3      	LDD  R27,Z+3
0008d2 93ba      	ST   -Y,R27
0008d3 93aa      	ST   -Y,R26
0008d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0008d5 81ea      	LDD  R30,Y+2
0008d6 81fb      	LDD  R31,Y+2+1
0008d7 81a4      	LDD  R26,Z+4
0008d8 81b5      	LDD  R27,Z+5
0008d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0008da 89eb      	LDD  R30,Y+19
0008db 89fc      	LDD  R31,Y+19+1
0008dc 81a2      	LDD  R26,Z+2
0008dd 81b3      	LDD  R27,Z+3
0008de 93ba      	ST   -Y,R27
0008df 93aa      	ST   -Y,R26
0008e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0008e1 89eb      	LDD  R30,Y+19
0008e2 89fc      	LDD  R31,Y+19+1
0008e3 81a4      	LDD  R26,Z+4
0008e4 81b5      	LDD  R27,Z+5
0008e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0008e6 940e 0860 	CALL _atoi
0008e8 018f      	MOVW R16,R30
0008e9 2400      	CLR  R0
0008ea 1600      	CP   R0,R16
0008eb 0601      	CPC  R0,R17
0008ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0008ed 940e 0395 	CALL _user_uart_println
0008ef 01fe      	MOVW R30,R28
0008f0 9632      	ADIW R30,2
0008f1 93fa      	ST   -Y,R31
0008f2 93ea      	ST   -Y,R30
0008f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xC:
0008f4 940e 07d3 	CALL _strcpy
0008f6 01fe      	MOVW R30,R28
0008f7 9632      	ADIW R30,2
0008f8 93fa      	ST   -Y,R31
0008f9 93ea      	ST   -Y,R30
0008fa 89ed      	LDD  R30,Y+21
0008fb 89fe      	LDD  R31,Y+21+1
0008fc 81a4      	LDD  R26,Z+4
0008fd 81b5      	LDD  R27,Z+5
0008fe 940e 07ae 	CALL _strcat
000900 01de      	MOVW R26,R28
000901 9612      	ADIW R26,2
000902 940c 05e9 	JMP  _DisplayLCDLine1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000904 a5e8      	LDD  R30,Y+40
000905 a5f9      	LDD  R31,Y+40+1
000906 81a2      	LDD  R26,Z+2
000907 81b3      	LDD  R27,Z+3
000908 93ba      	ST   -Y,R27
000909 93aa      	ST   -Y,R26
00090a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
00090b 01f8      	MOVW R30,R16
00090c a5a8      	LDD  R26,Y+40
00090d a5b9      	LDD  R27,Y+40+1
00090e 0fee      	LSL  R30
00090f 1fff      	ROL  R31
000910 0fae      	ADD  R26,R30
000911 1fbf      	ADC  R27,R31
000912 940e 09a0 	CALL __GETW1P
000914 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000915 0fee      	LSL  R30
000916 1fff      	ROL  R31
000917 0fae      	ADD  R26,R30
000918 1fbf      	ADC  R27,R31
000919 940e 09a0 	CALL __GETW1P
00091b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
00091c 93aa      	ST   -Y,R26
00091d 81e8      	LD   R30,Y
00091e e0a1      	LDI  R26,LOW(1)
00091f e0b0      	LDI  R27,HIGH(1)
000920 940e 0990 	CALL __LSLW12
000922 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000923 93e0 07e4 	STS  _LedCtrl,R30
000925 93f0 07e5 	STS  _LedCtrl+1,R31
000927 91e0 07e4 	LDS  R30,_LedCtrl
000929 93e0 8000 	STS  32768,R30
00092b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x12:
00092c 920a      	ST   -Y,R0
00092d 921a      	ST   -Y,R1
00092e 92fa      	ST   -Y,R15
00092f 936a      	ST   -Y,R22
000930 937a      	ST   -Y,R23
000931 938a      	ST   -Y,R24
000932 939a      	ST   -Y,R25
000933 93aa      	ST   -Y,R26
000934 93ba      	ST   -Y,R27
000935 93ea      	ST   -Y,R30
000936 93fa      	ST   -Y,R31
000937 b7ef      	IN   R30,SREG
000938 93ea      	ST   -Y,R30
000939 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x13:
00093a 91e9      	LD   R30,Y+
00093b bfef      	OUT  SREG,R30
00093c 91f9      	LD   R31,Y+
00093d 91e9      	LD   R30,Y+
00093e 91b9      	LD   R27,Y+
00093f 91a9      	LD   R26,Y+
000940 9199      	LD   R25,Y+
000941 9189      	LD   R24,Y+
000942 9179      	LD   R23,Y+
000943 9169      	LD   R22,Y+
000944 90f9      	LD   R15,Y+
000945 9019      	LD   R1,Y+
000946 9009      	LD   R0,Y+
000947 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000948 e0a1      	LDI  R26,LOW(1)
000949 e0b0      	LDI  R27,0
00094a 940c 0986 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
00094c 2e5e      	MOV  R5,R30
00094d 93e0 8200 	STS  33280,R30
00094f 81e8      	LD   R30,Y
000950 93e0 8300 	STS  33536,R30
000952 2de5      	MOV  R30,R5
000953 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000954 e0b0      	LDI  R27,0
000955 940e 0986 	CALL _delay_ms
000957 e3a0      	LDI  R26,LOW(48)
000958 940c 0663 	JMP  _dsp_cmd_TLCD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00095a ede7      	LDI  R30,LOW(_buf_G006)
00095b e0f8      	LDI  R31,HIGH(_buf_G006)
00095c 93e0 0957 	STS  _buf_ptr_G006,R30
00095e 93f0 0958 	STS  _buf_ptr_G006+1,R31
000960 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
000961 93fa      	ST   -Y,R31
000962 93ea      	ST   -Y,R30
000963 eda9      	LDI  R26,LOW(_cli_prompt)
000964 e0b9      	LDI  R27,HIGH(_cli_prompt)
000965 940e 0787 	CALL _cli_print_G006
000967 e0e0      	LDI  R30,LOW(0)
000968 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x19:
000969 2fe1      	MOV  R30,R17
00096a e0f0      	LDI  R31,0
00096b 01de      	MOVW R26,R28
00096c 9614      	ADIW R26,4
00096d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
00096e 93fa      	ST   -Y,R31
00096f 93ea      	ST   -Y,R30
                +
000970 efac     +LDI R26 , LOW ( 2 * _0xC0000 + ( 26 ) )
000971 e0b4     +LDI R27 , HIGH ( 2 * _0xC0000 + ( 26 ) )
                 	__POINTW2FN _0xC0000,26
000972 940c 0818 	JMP  _strtok
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000974 81ec      	LDD  R30,Y+4
000975 81fd      	LDD  R31,Y+4+1
000976 93fa      	ST   -Y,R31
000977 93ea      	ST   -Y,R30
000978 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
                +
000979 01fe     +MOVW R30 , R28
00097a 5ce0     +SUBI R30 , LOW ( - 64 )
00097b 4fff     +SBCI R31 , HIGH ( - 64 )
00097c 9001     +LD R0 , Z +
00097d 81f0     +LD R31 , Z
00097e 2de0     +MOV R30 , R0
                 	__GETW1SX 64
00097f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000980 93fa      	ST   -Y,R31
000981 93ea      	ST   -Y,R30
000982 eda9      	LDI  R26,LOW(_cli_prompt)
000983 e0b9      	LDI  R27,HIGH(_cli_prompt)
000984 940c 0787 	JMP  _cli_print_G006
                 
                 
                 	.CSEG
                 _delay_ms:
000986 9610      	adiw r26,0
000987 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000988 ea80     +LDI R24 , LOW ( 0xFA0 )
000989 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00098a 9701     +SBIW R24 , 1
00098b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00098c 95a8      	wdr
00098d 9711      	sbiw r26,1
00098e f7c9      	brne __delay_ms0
                 __delay_ms1:
00098f 9508      	ret
                 
                 __LSLW12:
000990 23ee      	TST  R30
000991 2e0e      	MOV  R0,R30
000992 01fd      	MOVW R30,R26
000993 f021      	BREQ __LSLW12R
                 __LSLW12L:
000994 0fee      	LSL  R30
000995 1fff      	ROL  R31
000996 940a      	DEC  R0
000997 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
000998 9508      	RET
                 
                 __LSLW3:
000999 0fee      	LSL  R30
00099a 1fff      	ROL  R31
                 __LSLW2:
00099b 0fee      	LSL  R30
00099c 1fff      	ROL  R31
00099d 0fee      	LSL  R30
00099e 1fff      	ROL  R31
00099f 9508      	RET
                 
                 __GETW1P:
0009a0 91ed      	LD   R30,X+
0009a1 91fc      	LD   R31,X
0009a2 9711      	SBIW R26,1
0009a3 9508      	RET
                 
                 __CPW02:
0009a4 2400      	CLR  R0
0009a5 160a      	CP   R0,R26
0009a6 060b      	CPC  R0,R27
0009a7 9508      	RET
                 
                 __SAVELOCR6:
0009a8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0009a9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0009aa 933a      	ST   -Y,R19
                 __SAVELOCR3:
0009ab 932a      	ST   -Y,R18
                 __SAVELOCR2:
0009ac 931a      	ST   -Y,R17
0009ad 930a      	ST   -Y,R16
0009ae 9508      	RET
                 
                 __LOADLOCR6:
0009af 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0009b0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0009b1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0009b2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0009b3 8119      	LDD  R17,Y+1
0009b4 8108      	LD   R16,Y
0009b5 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0009b6 0fac      	ADD  R26,R28
0009b7 1fbd      	ADC  R27,R29
                 __INITLOC0:
0009b8 9005      	LPM  R0,Z+
0009b9 920d      	ST   X+,R0
0009ba 958a      	DEC  R24
0009bb f7e1      	BRNE __INITLOC0
0009bc 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  29 r1 :   3 r2 :   3 r3 :   0 r4 :   0 r5 :   7 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  69 r17:  59 r18:  35 r19:  28 r20:   5 r21:   4 r22:  32 r23:  11 
r24:  30 r25:   6 r26: 214 r27: 137 r28:  31 r29:   2 r30: 336 r31: 130 
x  :  39 y  : 228 z  :  36 
Registers used: 24 out of 35 (68.6%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :  16 
adiw  :  31 and   :   2 andi  :   4 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  16 
brge  :  16 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   9 brmi  :   2 brne  :  38 brpl  :   0 brsh  :   3 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 165 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 
cp    :  13 cpc   :  26 cpi   :  37 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 
ijmp  :   0 in    :   4 inc   :   0 jmp   :  59 ld    :  75 ldd   :  89 
ldi   : 263 lds   :  18 lpm   :  12 lsl   :  11 lsr   :   0 mov   :  26 
movw  :  51 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   2 ori   :   3 out   :  19 pop   :   8 push  :   8 rcall :  31 
ret   :  55 reti  :   2 rjmp  :  41 rol   :  11 ror   :   0 sbc   :   1 
sbci  :  18 sbi   :   1 sbic  :   0 sbis  :   1 sbiw  :  21 sbr   :   0 
sbrc  :   0 sbrs  :   1 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 125 std   :   5 sts   :  35 sub   :   2 subi  :  24 
swap  :   0 tst   :  14 wdr   :   1 
Instructions used: 61 out of 117 (52.1%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00137a   3506   1480   4986  131072   3.8%
[.dseg] 0x000100 0x0009f0      0   1264   1264    4351  29.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 11 warnings
